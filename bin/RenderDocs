#!/usr/bin/env raku
use experimental :rakuast;

multi sub MAIN(
        :$src = 'docs',
        :$to = $*CWD
       ) {
    my %docs = $src.IO.dir(test => *.ends-with('.rakudoc')).map({ .extension('').basename => .modified });
    my %rendered = $to.IO.dir(test => *.ends-with('.md')).map({ .extension('').basename => .modified });
    my @to-be-rendered = %docs.pairs.grep({
        %rendered{.key}:exists.not ||(%rendered{.key} < .value)
    })>>.key;
    say 'Documents with .md in CWD, but not in docs/ : ', (%rendered.keys (-) %docs.keys).keys;
    render-files(@to-be-rendered, $src, $to)
}
multi sub MAIN(
        Str:D $file,    #= a single file name that must exist in src directory
        :$src = 'docs', #= the directory containing the source files, defaults to docs/
        :$to = $*CWD    #= the directory to which the output is directed, defaults to $*CWD
        ) {
    exit note "｢$src\/$file.rakudoc｣ does not exist" unless "$src\/$file.rakudoc".IO ~~ :e & :f;
    render-files([$file,], $src, $to)
}
sub render-files (@to-be-rendered, $src, $to) {
    for @to-be-rendered.sort {
        my $dest = "$to\/$_";
        say "Processing ｢$src/$_.rakudoc｣ to ｢$dest.md｣";
        my $p = shell ('RAKUDO_RAKUAST=1', $*EXECUTABLE, '-I.', '-MRakuDoc::Render', '--rakudoc=Markdown', "$src/$_.rakudoc"), :err, :out;
        my $err = $p.err.slurp(:close);
        $err.say if $err;
        my $out = $p.out.slurp(:close);
        "$dest.md".IO.spurt($out) if $out;
    }
}