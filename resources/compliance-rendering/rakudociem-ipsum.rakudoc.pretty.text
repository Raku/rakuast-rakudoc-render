
<final>
  body: ｢
  <rakudoc>
    another-option: ｢2｣
    contents: ｢
  <semantic>
    caption: ｢SYNOPSIS｣
    contents: ｢<para>
    contents: ｢Assuming a new renderer has been developed and installed (eg using 
  <markup-I>
    contents: ｢zef｣
  </markup-I>
  ) at 
  <markup-B>
    contents: ｢Rakudoc::To::MyRender｣
  </markup-B>
  , the render this file using a 
  <markup-C>
    contents: ｢raku --rakudoc=MyRenderer｣
  </markup-C>
   terminal command. The renderer will be consistent with the RakuDoc v2 specification if all the blocks are rendered appropriately, and warnings are generated by the statements marked as incorrect below. ｣
    inline: ｢False｣
    target: ｢c762547｣
  </para>｣
    hidden: ｢False｣
    id: ｢｣
    level: ｢1｣
    target: ｢SYNOPSIS｣
  </semantic>
  
  <head>
    caption: ｢Purpose｣
    contents: ｢Purpose｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢｣
    target: ｢Purpose｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢This file is intended to prove a RakuDoc v2 renderer. It can be used in several ways: ｣
    inline: ｢False｣
    target: ｢289b7b1｣
  </para>
  
  <item-list>
    item-list: ｢Array=[
    	(PStr): 
    	<item>
    	  contents: ｢to generate the AST representation of all the RakuDoc components in the specification｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢to prove a renderer that a new renderer should be able to process this file｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢to visualise how the final output of a RakuDoc source will look after processing｣
    	  level: ｢1｣
    	</item>
    
    ]｣
  </item-list>
  
  <para>
    contents: ｢An attempt has been made to utilise all RakuDoc components, it is not an exhaustive test of all components in all possible combinations. Please suggest additional combinations if they turn out to have unusual effects. ｣
    inline: ｢False｣
    target: ｢a1f56c2｣
  </para>
  
  <para>
    contents: ｢Several 
  <markup-I>
    contents: ｢mistakes｣
  </markup-I>
   have been included where the RakuDoc v2 specification indicates how inconsistent behaviours or unknown components should be handled. ｣
    inline: ｢False｣
    target: ｢f501138｣
  </para>
  
  <para>
    contents: ｢The the end of the rendering of this source file, a number of warning messages should be included. ｣
    inline: ｢False｣
    target: ｢d6a1df2｣
  </para>
  
  <place>
    caption: ｢List=(
    	"Short",
    	"table",
    	"of",
    	"contents"
    )｣
    content-type: ｢text｣
    contents: ｢(PCell): ｢toc_1 UNAVAILABLE｣｣
    keep-format: ｢True｣
    schema: ｢toc｣
    target: ｢Short_table_of_contents｣
    uri: ｢toc:1｣
    uri-body: ｢1｣
  </place>
  
  <place>
    caption: ｢List=(
    	"A",
    	"short",
    	"index"
    )｣
    content-type: ｢text｣
    contents: ｢(PCell): ｢index_1 UNAVAILABLE｣｣
    keep-format: ｢True｣
    schema: ｢index｣
    target: ｢A_short_index｣
    uri: ｢index:1｣
    uri-body: ｢1｣
  </place>
  
  <head>
    caption: ｢This is a first heading｣
    contents: ｢This is a first heading｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢｣
    target: ｢This_is_a_first_heading｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢text ｣
    inline: ｢False｣
    target: ｢170d167｣
  </para>
  
  <head>
    caption: ｢This is a second level heading｣
    contents: ｢This is a second level heading｣
    id: ｢｣
    level: ｢2｣
    numeration: ｢｣
    target: ｢This_is_a_second_level_heading｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢text ｣
    inline: ｢False｣
    target: ｢170d167｣
  </para>
  
  <head>
    caption: ｢This is third level heading｣
    contents: ｢This is third level heading｣
    delta: ｢
    <delta>
      note: ｢developers can attach notes to blocks associated with versions｣
      versions: ｢v2｣
    </delta>
    ｣
    id: ｢｣
    level: ｢3｣
    numeration: ｢｣
    target: ｢This_is_third_level_heading｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-B>
    contents: ｢Basis type｣
  </markup-B>
   formatting. ｣
    inline: ｢False｣
    target: ｢f9f2374｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-I>
    contents: ｢Important type｣
  </markup-I>
   formatting. ｣
    inline: ｢False｣
    target: ｢e7df099｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-U>
    contents: ｢Unusual type｣
  </markup-U>
   formatting. ｣
    inline: ｢False｣
    target: ｢2f192b5｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-O>
    contents: ｢Strikethrough type｣
  </markup-O>
   formatting. ｣
    inline: ｢False｣
    target: ｢6c2d3ed｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-H>
    contents: ｢Superscript type｣
  </markup-H>
   formatting. (For text output, many terminals do not support superscript/subscript font positions, so consider using a colouration as well.) ｣
    inline: ｢False｣
    target: ｢42317c3｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-J>
    contents: ｢Subscript type｣
  </markup-J>
   formatting. ｣
    inline: ｢False｣
    target: ｢de20dfa｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-C>
    contents: ｢Code type｣
  </markup-C>
   formatting. It can contain other markup, eg. 
  <markup-C>
    contents: ｢A<> markup｣
  </markup-C>
  . ｣
    inline: ｢False｣
    target: ｢4e42255｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-V>
    contents: ｢Verbatim type｣
  </markup-V>
   formatting. It can contain other RakuDoc, eg. 
  <markup-V>
    contents: ｢P<defn:Happy>｣
  </markup-V>
   without executing it. ｣
    inline: ｢False｣
    target: ｢16f1f0e｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate some >< formatting (in the source has 
  <markup-V>
    contents: ｢Z<Zero width>｣
  </markup-V>
   between >< ). ｣
    inline: ｢False｣
    target: ｢d838a6a｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-K>
    contents: ｢Keyboard｣
  </markup-K>
   formatting. ｣
    inline: ｢False｣
    target: ｢5f6375a｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-R>
    contents: ｢Replacement｣
  </markup-R>
   formatting. ｣
    inline: ｢False｣
    target: ｢90c771f｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate 
  <markup-T>
    contents: ｢Terminal｣
  </markup-T>
   formatting. ｣
    inline: ｢False｣
    target: ｢fd5b848｣
  </para>
  
  <para>
    contents: ｢A paragraph to illustrate several 
  <markup-bad>
    contents: ｢G<G undefined type>｣
  </markup-bad>
  , 
  <markup-bad>
    contents: ｢Q<Q undefined type>｣
  </markup-bad>
  , 
  <markup-bad>
    contents: ｢W<W undefined type>｣
  </markup-bad>
  , 
  <markup-bad>
    contents: ｢Y<Y undefined type>｣
  </markup-bad>
   formatting; warnings are expected. ｣
    inline: ｢False｣
    target: ｢0e9816d｣
  </para>
  
  <para>
    contents: ｢Various entities are possible such as 
  <markup-E>
    contents: ｢«｣
  </markup-E>
   or the same thing using unicode 
  <markup-E>
    contents: ｢«｣
  </markup-E>
  . Entities can be double unicodes, such as 
  <markup-E>
    contents: ｢🇺🇦｣
  </markup-E>
  , which is the Ukrainian flag. ｣
    inline: ｢False｣
    target: ｢9b51787｣
  </para>
  
  <para>
    contents: ｢In case you have forgotten, here is something aliased at the start: 
  <markup-A>
    contents: ｢Do not consider this a disquisition of possible combinations.｣
    error: ｢False｣
    error-text: ｢｣
  </markup-A>
   ｣
    inline: ｢False｣
    target: ｢8d9a8d1｣
  </para>
  
  <para>
    contents: ｢This is an example of an Alias where 
  <markup-V>
    contents: ｢A<DECLARATION>｣
  </markup-V>
   was replaced by the contents of the 
  <markup-V>
    contents: ｢=alias｣
  </markup-V>
   directive. Aliases are scoped, see below, but cannot be specified before being used in the document. Here is 
  <markup-A>
    contents: ｢an undeclared｣
    error: ｢True｣
    error-text: ｢an undeclared｣
  </markup-A>
   forward reference, which was written as 
  <markup-V>
    contents: ｢A<an undeclared|XXX>｣
  </markup-V>
  . The use of an undeclared alias causes a warning. ｣
    inline: ｢False｣
    target: ｢72daf7b｣
  </para>
  
  <para>
    contents: ｢We can also make an inline 
  <markup-D>
    contents: ｢definition｣
  </markup-D>
  . This whole paragraph will be referenced later. ｣
    inline: ｢False｣
    target: ｢74f47cb｣
  </para>
  
  <para>
    contents: ｢A developer note 
  <markup-Δ>
    contents: ｢can be attached｣
    note: ｢ highly deprecated｣
    versions: ｢v1.2.3 ^.. v2.0.0｣
  </markup-Δ>
   to text. A renderer may show the text or only show it for contexts compliant with the version. ｣
    inline: ｢False｣
    target: ｢f3a9542｣
  </para>
  
  <para>
    contents: ｢But a note without meta 
  <markup-V>
    contents: ｢no versioning here｣
  </markup-V>
   is ignored and a warning generated. ｣
    inline: ｢False｣
    target: ｢2f18f95｣
  </para>
  
  <para>
    contents: ｢When we want a formula 
  <markup-F>
    contents: ｢\sum \frac{1}{n^{2}} = \frac{\pi^{2}}{6}｣
    formula: ｢\sum \frac{1}{n^{2}} = \frac{\pi^{2}}{6}｣
  </markup-F>
   use 
  <markup-V>
    contents: ｢F<>｣
  </markup-V>
   markup. ｣
    inline: ｢False｣
    target: ｢cbf3739｣
  </para>
  
  <para>
    contents: ｢Links can be made internally 
  <markup-L>
    extra: ｢｣
    link-label: ｢say to the first heading｣
    output-format: ｢txt｣
    target: ｢This_is_a_first_heading｣
    type: ｢internal｣
  </markup-L>
   or externally 
  <markup-L>
    extra: ｢｣
    link-label: ｢say to the raku documentation site｣
    output-format: ｢txt｣
    target: ｢https://docs.raku.org｣
    type: ｢external｣
  </markup-L>
  . ｣
    inline: ｢False｣
    target: ｢12dfd2e｣
  </para>
  
  <para>
    contents: ｢A renderer should provide the opportunity to customise text using 
  <markup-V>
    contents: ｢M<...|..,..;...>｣
  </markup-V>
   markup. The renderer 
  <markup-M>
    contents: ｢should not recognise this functionality｣
    target: ｢index-entry-should_not_recognise_this_functionality｣
  </markup-M>
   and issue a warning. ｣
    inline: ｢False｣
    target: ｢cd2da72｣
  </para>
  
  <para>
    contents: ｢A note 
  <markup-N>
    fnNumber: ｢(PCell): ｢fn_num_N<such_as_this_one> UNAVAILABLE｣｣
    fnTarget: ｢fn_target_N<such_as_this_one>｣
    retTarget: ｢N<such_as_this_one>｣
  </markup-N>
   will not itself be rendered inline, but the text will be rendered in a footnote or popup. A marker or number will be rendered to point to the text. ｣
    inline: ｢False｣
    target: ｢e812276｣
  </para>
  
  <para>
    contents: ｢Suppose we want to place the definition 
  <markup-P>
    content-type: ｢text｣
    contents: ｢Im-a-doppelganger｣
    defn-expansion: ｢(PCell): 
    <para>
      contents: ｢We can also make an inline 
    <markup-D>
      contents: ｢definition｣
    </markup-D>
    . This whole paragraph will be referenced later. ｣
      inline: ｢False｣
      target: ｢74f47cb｣
    </para>
    ｣
    defn-target: ｢(PCell): 74f47cb｣
    keep-format: ｢False｣
    schema: ｢defn｣
    uri: ｢defn:Im-a-doppelganger｣
    uri-body: ｢Im-a-doppelganger｣
  </markup-P>
   here. And to confound pedants, here is a definition 
  <markup-P>
    content-type: ｢text｣
    contents: ｢Happy｣
    defn-expansion: ｢(PCell): ｢Happy UNAVAILABLE｣｣
    defn-target: ｢(PCell): ｢Happy_target UNAVAILABLE｣｣
    keep-format: ｢False｣
    schema: ｢defn｣
    uri: ｢defn:Happy｣
    uri-body: ｢Happy｣
  </markup-P>
   defined using a 
  <markup-C>
    contents: ｢=defn｣
  </markup-C>
   block. ｣
    inline: ｢False｣
    target: ｢72c2e70｣
  </para>
  
  <para>
    contents: ｢Normally extra spaces are removed with paragraphs, but sometimes 
  <markup-S>
    contents: ｢we truly dot dot dot   dash dash dash       want them｣
  </markup-S>
  . ｣
    inline: ｢False｣
    target: ｢d05e603｣
  </para>
  
  <para>
    contents: ｢Good text will contain 
  <markup-X>
    contents: ｢elements to be placed｣
    meta: ｢Array=[
    	Array=[]
    ]｣
    place: ｢This is third level heading｣
    target: ｢index-entry-elements_to_be_placed｣
  </markup-X>
   in an index. The index has already been placed at the start of the document, although content is generated here. ｣
    inline: ｢False｣
    target: ｢cfe65ca｣
  </para>
  
  <numhead>
    caption: ｢This is a numbered heading, level 1｣
    contents: ｢This is a numbered heading, level 1｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢1.｣
    target: ｢This_is_a_numbered_heading,_level_1｣
    toc: ｢True｣
  </numhead>
  
  <para>
    contents: ｢text ｣
    inline: ｢False｣
    target: ｢170d167｣
  </para>
  
  <numhead>
    caption: ｢This is a second level heading｣
    contents: ｢This is a second level heading｣
    id: ｢｣
    level: ｢2｣
    numeration: ｢1.1.｣
    target: ｢This_is_a_second_level_heading_0｣
    toc: ｢True｣
  </numhead>
  
  <para>
    contents: ｢text ｣
    inline: ｢False｣
    target: ｢170d167｣
  </para>
  
  <numhead>
    caption: ｢A third level｣
    contents: ｢A third level｣
    id: ｢｣
    level: ｢3｣
    numeration: ｢1.1.1.｣
    target: ｢A_third_level｣
    toc: ｢True｣
  </numhead>
  
  <para>
    contents: ｢text ｣
    inline: ｢False｣
    target: ｢170d167｣
  </para>
  
  <numhead>
    caption: ｢Another third level｣
    contents: ｢Another third level｣
    id: ｢｣
    level: ｢3｣
    numeration: ｢1.1.2.｣
    target: ｢Another_third_level｣
    toc: ｢True｣
  </numhead>
  
  <para>
    contents: ｢text ｣
    inline: ｢False｣
    target: ｢170d167｣
  </para>
  
  <numhead>
    caption: ｢Back to second｣
    contents: ｢Back to second｣
    id: ｢｣
    level: ｢2｣
    numeration: ｢1.2.｣
    target: ｢Back_to_second｣
    toc: ｢True｣
  </numhead>
  
  <para>
    contents: ｢text ｣
    inline: ｢False｣
    target: ｢170d167｣
  </para>
  
  <numhead>
    caption: ｢A third level｣
    contents: ｢A third level｣
    id: ｢｣
    level: ｢3｣
    numeration: ｢1.2.1.｣
    target: ｢A_third_level_0｣
    toc: ｢True｣
  </numhead>
  
  <para>
    contents: ｢Although this heading has the same text in the heading, the Table of Contents should provide a unique target for it (this may not be possible in some formats such as MarkDown) ｣
    inline: ｢False｣
    target: ｢d834d1b｣
  </para>
  
  <numhead>
    caption: ｢Another third level｣
    contents: ｢Another third level｣
    id: ｢｣
    level: ｢3｣
    numeration: ｢1.2.2.｣
    target: ｢Another_third_level_0｣
    toc: ｢True｣
  </numhead>
  
  <para>
    contents: ｢text ｣
    inline: ｢False｣
    target: ｢170d167｣
  </para>
  
  <head>
    caption: ｢Lists｣
    contents: ｢Lists｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢｣
    target: ｢Lists｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢Unnumbered up to four levels of bulleting are required, a renderer can offer more. ｣
    inline: ｢False｣
    target: ｢55bb607｣
  </para>
  
  <item-list>
    item-list: ｢Array=[
    	(PStr): 
    	<item>
    	  contents: ｢The start of a unnumbered item list｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢Next item｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢now next level｣
    	  level: ｢2｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢another at two｣
    	  level: ｢2｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢a third level｣
    	  level: ｢3｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢fourth level｣
    	  level: ｢4｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢fourth level｣
    	  level: ｢4｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢level five｣
    	  level: ｢5｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢level six｣
    	  level: ｢6｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢level seven｣
    	  level: ｢7｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢reset to level one｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  contents: ｢jump levels｣
    	  level: ｢3｣
    	</item>
    
    ]｣
  </item-list>
  
  <para>
    contents: ｢｣
  </para>
  
  <para>
    contents: ｢
  <para>
    contents: ｢to put space between lists, probably a 
  <markup-C>
    contents: ｢=para｣
  </markup-C>
   without text is needed. ｣
    inline: ｢False｣
    target: ｢7ecf858｣
  </para>｣
  </para>
  
  <numitem-list>
    numitem-list: ｢Array=[
    	(PStr): 
    	<numitem>
    	  contents: ｢The start of a numbered item list｣
    	  level: ｢1｣
    	  numeration: ｢1.｣
    	</numitem>
    ,
    	(PStr): 
    	<numitem>
    	  contents: ｢Next item｣
    	  level: ｢1｣
    	  numeration: ｢2.｣
    	</numitem>
    ,
    	(PStr): 
    	<numitem>
    	  contents: ｢now next level｣
    	  level: ｢2｣
    	  numeration: ｢2.1.｣
    	</numitem>
    ,
    	(PStr): 
    	<numitem>
    	  contents: ｢another at two｣
    	  level: ｢2｣
    	  numeration: ｢2.2.｣
    	</numitem>
    ,
    	(PStr): 
    	<numitem>
    	  contents: ｢a third level｣
    	  level: ｢3｣
    	  numeration: ｢2.2.1.｣
    	</numitem>
    ,
    	(PStr): 
    	<numitem>
    	  contents: ｢reset to level one｣
    	  level: ｢1｣
    	  numeration: ｢3.｣
    	</numitem>
    ,
    	(PStr): 
    	<numitem>
    	  contents: ｢jump levels｣
    	  level: ｢3｣
    	  numeration: ｢3.0.1.｣
    	</numitem>
    
    ]｣
  </numitem-list>
  
  <item-list>
    item-list: ｢Array=[
    	(PStr): 
    	<item>
    	  contents: ｢an unnumbered item｣
    	  level: ｢1｣
    	</item>
    
    ]｣
  </item-list>
  
  <numitem-list>
    numitem-list: ｢Array=[
    	(PStr): 
    	<numitem>
    	  contents: ｢but we can resume after a break｣
    	  continued: ｢True｣
    	  level: ｢2｣
    	  numeration: ｢3.1.｣
    	</numitem>
    
    ]｣
  </numitem-list>
  
  <para>
    contents: ｢｣
  </para>
  
  <defn-list>
    defn-list: ｢Array=[
    	(PStr): 
    	<defn>
    	  contents: ｢can be placed in lists ｣
    	  target: ｢defn_Definitions｣
    	  term: ｢Definitions｣
    	</defn>
    ,
    	(PStr): 
    	<defn>
    	  contents: ｢when not blue ｣
    	  target: ｢defn_Happy｣
    	  term: ｢Happy｣
    	</defn>
    ,
    	(PStr): 
    	<defn>
    	  contents: ｢when not happy ｣
    	  target: ｢defn_Blue｣
    	  term: ｢Blue｣
    	</defn>
    ,
    	(PStr): 
    	<defn>
    	  contents: ｢
    	<para>
    	  contents: ｢Just 
    	<markup-B>
    	  contents: ｢shout｣
    	</markup-B>
    	 why don't you? ｣
    	  inline: ｢False｣
    	  target: ｢6acc7d6｣
    	</para>
    	｣
    	  target: ｢defn_Being_assertive｣
    	  term: ｢Being assertive｣
    	</defn>
    
    ]｣
  </defn-list>
  
  <para>
    contents: ｢｣
  </para>
  
  <para>
    contents: ｢This is an ordinary paragraph ｣
    inline: ｢False｣
    target: ｢9cbaca5｣
  </para>
  
  <numdefn-list>
    numdefn-list: ｢Array=[
    	(PStr): 
    	<numdefn>
    	  contents: ｢do not make trouble ｣
    	  numeration: ｢1.｣
    	  target: ｢defn_Lemma_1｣
    	  term: ｢Lemma 1｣
    	</numdefn>
    ,
    	(PStr): 
    	<numdefn>
    	  contents: ｢do not shout at people ｣
    	  numeration: ｢2.｣
    	  target: ｢defn_Lemma_2｣
    	  term: ｢Lemma 2｣
    	</numdefn>
    ,
    	(PStr): 
    	<numdefn>
    	  contents: ｢just phone the SWAT team ｣
    	  numeration: ｢3.｣
    	  target: ｢defn_Lemma_3｣
    	  term: ｢Lemma 3｣
    	</numdefn>
    
    ]｣
  </numdefn-list>
  
  <para>
    contents: ｢An ordinary paragraph creates the definition list. ｣
    inline: ｢False｣
    target: ｢84e6def｣
  </para>
  
  <numdefn-list>
    numdefn-list: ｢Array=[
    	(PStr): 
    	<numdefn>
    	  contents: ｢Claim you are the victim here ｣
    	  continued: ｢True｣
    	  numeration: ｢4.｣
    	  target: ｢defn_Lemma_4｣
    	  term: ｢Lemma 4｣
    	</numdefn>
    
    ]｣
  </numdefn-list>
  
  <head>
    caption: ｢Taking a bullet｣
    contents: ｢Taking a bullet｣
    id: ｢｣
    level: ｢2｣
    numeration: ｢｣
    target: ｢Taking_a_bullet｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢The project originally consisted of five phases, of which two are already complete and two have been abandoned: ｣
    inline: ｢False｣
    target: ｢93c18bc｣
  </para>
  
  <item-list>
    item-list: ｢Array=[
    	(PStr): 
    	<item>
    	  bullet: ｢☑｣
    	  contents: ｢Investigate existing solutions｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  bullet: ｢☑｣
    	  contents: ｢Define a minimal initial feature set｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  bullet: ｢☐｣
    	  contents: ｢Implement this minimal set of features｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  bullet: ｢☒｣
    	  contents: ｢Secure 100 million in venture capital｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  bullet: ｢☒｣
    	  contents: ｢Abscond to the Bahamas with the cash｣
    	  level: ｢1｣
    	</item>
    
    ]｣
  </item-list>
  
  <section>
    contents: ｢
  <para>
    contents: ｢The major sources of sustainable energy are: ｣
    inline: ｢False｣
    target: ｢ff4b3ca｣
  </para>
  <item-list>
    item-list: ｢Array=[
    	(PStr): 
    	<item>
    	  bullet: ｢🌍｣
    	  contents: ｢wind｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  bullet: ｢🌍｣
    	  contents: ｢hydroelectric｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  bullet: ｢🌍｣
    	  contents: ｢solar｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  bullet: ｢🌍｣
    	  contents: ｢geothermal｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  bullet: ｢🌍｣
    	  contents: ｢fusion｣
    	  level: ｢1｣
    	</item>
    ,
    	(PStr): 
    	<item>
    	  bullet: ｢🤞｣
    	  contents: ｢(eventually)｣
    	  level: ｢2｣
    	</item>
    
    ]｣
  </item-list>
  ｣
    id: ｢｣
  </section>
  
  <head>
    caption: ｢Blocks that are processed differently｣
    contents: ｢Blocks that are processed differently｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢｣
    target: ｢Blocks_that_are_processed_differently｣
    toc: ｢True｣
  </head>
  
  <code>
    contents: ｢my $x = 2;
  # a brilliant program!｣
  </code>
  
  <code>
    allow: ｢List=(
    	"B",
    	"K"
    )｣
    contents: ｢my $x = 3;
  # a renderer 
  <markup-B>
    contents: ｢should｣
  </markup-B>
   observe the basis markup
  # and the 
  <markup-K>
    contents: ｢markup｣
  </markup-K>
   but render R<markup> verbatim｣
  </code>
  
  <implicit-code>
    contents: ｢# indenting causes an implicit code block
  my $raku = 'fantastic';｣
  </implicit-code>
  
  <input>
    contents: ｢This is a text with 
  <markup-B>
    contents: ｢basis｣
  </markup-B>
   markup that conserves
  all spacing      when trying    to get column
  just using       white spaces   naively
  better           to             use tables｣
  </input>
  
  <output>
    contents: ｢This is almost the same as input
  but may have a different styling｣
  </output>
  
  <nested>
    contents: ｢
  <para>
    contents: ｢Occasionally some text that is inset from the margin is required. So enclose it in a nested block. ｣
    inline: ｢False｣
    target: ｢72145a8｣
  </para>｣
  </nested>
  
  <para>
    contents: ｢The following semantic block was included at the beginning in source, but it is now included here. ｣
    inline: ｢False｣
    target: ｢ccd64b2｣
  </para>
  
  <place>
    caption: ｢List=(
    	"Unrelenting",
    	"hype"
    )｣
    content-type: ｢text｣
    contents: ｢(PCell): ｢semantic_AUTHORS UNAVAILABLE｣｣
    headlevel: ｢2｣
    keep-format: ｢True｣
    schema: ｢semantic｣
    target: ｢Unrelenting_hype｣
    uri: ｢semantic:AUTHORS｣
    uri-body: ｢AUTHORS｣
  </place>
  
  <formula>
    alt: ｢Formula cannot be rendered｣
    caption: ｢List=(
    	"Fabulous",
    	"identity"
    )｣
    formula: ｢e^{i\pi}+1=0｣
    id: ｢UNINITIALISED｣
    level: ｢1｣
    numeration: ｢｣
    raw: ｢e^{i\pi}+1=0
    
    ｣
    target: ｢Formula_cannot_be_rendered｣
  </formula>
  
  <unknown>
    block-name: ｢MyBlock｣
    contents: ｢=begin MyBlock :caption<A customised block> :headlevel(2)
    Actually it fails because no customisation has been made.
    It
    should
    be
    rendered without spaces      being chewed up.
    =end MyBlock
    
    ｣
    target: ｢A_customised_block｣
  </unknown>
  
  <para>
    caption: ｢List=(
    	"This",
    	"is",
    	"an",
    	"extraordinary",
    	"paragraph"
    )｣
    contents: ｢
  <para>
    contents: ｢Some silly text which will have its own 
  <markup-B>
    contents: ｢extraordinary｣
  </markup-B>
   ToC entry ｣
    inline: ｢False｣
    target: ｢bd5b8f0｣
  </para>｣
    target: ｢This_is_an_extraordinary_paragraph｣
    toc: ｢True｣
  </para>
  
  <para>
    contents: ｢You are reminded that: 
  <markup-A>
    contents: ｢
  <markup-A>
    contents: ｢Do not consider this a disquisition of possible combinations.｣
    error: ｢False｣
    error-text: ｢｣
  </markup-A>
  ｣
    error: ｢False｣
    error-text: ｢｣
  </markup-A>
   ｣
    inline: ｢False｣
    target: ｢1b43fc1｣
  </para>
  
  <head>
    caption: ｢Some tables｣
    contents: ｢Some tables｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢｣
    target: ｢Some_tables｣
    toc: ｢True｣
  </head>
  
  <table>
    caption: ｢List=(
    	"A",
    	"visual",
    	"table"
    )｣
    grid: ｢Array=[]｣
    header-row: ｢0｣
    header-rows: ｢UNINITIALISED｣
    headers: ｢Array=[
    	Array=[
    			(PStr): Animal,
    			(PStr): Legs,
    			(PStr):    Eats
    	]
    ]｣
    headlevel: ｢2｣
    id: ｢UNINITIALISED｣
    level: ｢2｣
    procedural: ｢False｣
    rows: ｢Array=[
    	Array=[
    			(PStr): Zebra ,
    			(PStr):   4 ,
    			(PStr): Cookies
    	],
    	Array=[
    			(PStr): Human ,
    			(PStr):   2 ,
    			(PStr):   Pizza
    	],
    	Array=[
    			(PStr): Shark ,
    			(PStr):   0 ,
    			(PStr):    Fish
    	]
    ]｣
    target: ｢A_visual_table｣
  </table>
  
  <table>
    caption: ｢List=(
    	"A",
    	"visual",
    	"table",
    	"with",
    	"a",
    	"stupendously",
    	"long",
    	"caption"
    )｣
    grid: ｢Array=[]｣
    header-row: ｢0｣
    header-rows: ｢UNINITIALISED｣
    headers: ｢Array=[
    	Array=[
    			(PStr): Animal,
    			(PStr): Legs,
    			(PStr):    Eats
    	]
    ]｣
    headlevel: ｢2｣
    id: ｢UNINITIALISED｣
    level: ｢2｣
    procedural: ｢False｣
    rows: ｢Array=[
    	Array=[
    			(PStr): Zebra ,
    			(PStr):   4 ,
    			(PStr): Cookies
    	],
    	Array=[
    			(PStr): Human ,
    			(PStr):   2 ,
    			(PStr):   Pizza
    	],
    	Array=[
    			(PStr): Shark ,
    			(PStr):   0 ,
    			(PStr):    Fish
    	]
    ]｣
    target: ｢A_visual_table_with_a_stupendously_long_caption｣
  </table>
  
  <table>
    caption: ｢List=(
    	"A",
    	"procedural",
    	"table"
    )｣
    grid: ｢Array=[
    	Array=[
    			Hash={
    						:data((PStr): Date),
    						:header,
    						:row-span(2),
    						:span(Array=[
    							1,
    							2
    						])
    			},
    			Hash={
    						:column-span(3),
    						:data((PStr): Samples),
    						:header,
    						:span(Array=[
    							3,
    							1
    						])
    			},
    			Hash={
    						:no-cell
    			},
    			Hash={
    						:no-cell
    			},
    			Hash={
    						:data((PStr): Mean),
    						:header,
    						:row-span(2),
    						:span(Array=[
    							1,
    							2
    						])
    			}
    	],
    	Array=[
    			Hash={
    						:no-cell
    			},
    			Hash={
    						:data((PStr): 
    						<para>
    						  contents: ｢
    						<markup-I>
    						  contents: ｢Sample 1｣
    						</markup-I>
    						 ｣
    						  inline: ｢True｣
    						  target: ｢c0b4a94｣
    						</para>),
    						:header
    			},
    			Hash={
    						:data((PStr): 
    						<para>
    						  contents: ｢
    						<markup-I>
    						  contents: ｢Sample 2｣
    						</markup-I>
    						 ｣
    						  inline: ｢True｣
    						  target: ｢0617d81｣
    						</para>),
    						:header
    			},
    			Hash={
    						:data((PStr): 
    						<para>
    						  contents: ｢
    						<markup-I>
    						  contents: ｢Sample 3｣
    						</markup-I>
    						 ｣
    						  inline: ｢True｣
    						  target: ｢15dfd27｣
    						</para>),
    						:header
    			},
    			Hash={
    						:no-cell
    			}
    	],
    	Array=[
    			Hash={
    						:data((PStr): 2023-03-08)
    			},
    			Hash={
    						:data((PStr): 0.4)
    			},
    			Hash={
    						:data((PStr): 0.1)
    			},
    			Hash={
    						:data((PStr): 0.3)
    			},
    			Hash={
    						:data((PStr): 0.26667)
    			}
    	],
    	Array=[
    			Hash={
    						:data((PStr): 2023-04-14)
    			},
    			Hash={
    						:data((PStr): 0.8)
    			},
    			Hash={
    						:data((PStr): 0.6)
    			},
    			Hash={
    						:data((PStr): 0.5)
    			},
    			Hash={
    						:data((PStr): 0.63333)
    			}
    	],
    	Array=[
    			Hash={
    						:data((PStr): 2023-06-23)
    			},
    			Hash={
    						:data((PStr): 0.2)
    			},
    			Hash={
    						:data((PStr): 0.9)
    			},
    			Hash={
    						:data((PStr): 0.0)
    			},
    			Hash={
    						:data((PStr): 0.36667)
    			}
    	],
    	Array=[
    			Hash={
    						:data((PStr): Mean:),
    						:label
    			},
    			Hash={
    						:data((PStr): 0.46667)
    			},
    			Hash={
    						:data((PStr): 0.53333)
    			},
    			Hash={
    						:data((PStr): 0.26667)
    			},
    			Hash={
    						:data((PStr): 0.42222)
    			}
    	]
    ]｣
    header-rows: ｢1｣
    headers: ｢Array=[]｣
    headlevel: ｢2｣
    id: ｢UNINITIALISED｣
    level: ｢2｣
    procedural: ｢True｣
    rows: ｢Array=[]｣
    target: ｢A_procedural_table｣
  </table>
  
  <head>
    caption: ｢Adding index entries to your text｣
    contents: ｢Adding index entries to your text｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢｣
    target: ｢Adding_index_entries_to_your_text｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢An 
  <markup-X>
    contents: ｢index entry｣
    meta: ｢Array=[
    	Array=[
    			"index",
    			"entry"
    	]
    ]｣
    place: ｢Adding index entries to your text｣
    target: ｢index-entry-index_entry｣
  </markup-X>
   is an inline 
  <markup-X>
    contents: ｢formatting code｣
    meta: ｢Array=[
    	Array=[
    			"formatting code"
    	],
    	Array=[
    			"inline formatting"
    	]
    ]｣
    place: ｢Adding index entries to your text｣
    target: ｢index-entry-formatting_code｣
  </markup-X>
   that is rendered normally (i.e. with no special identifying styling) within the text, but which is also added to the 
  <markup-X>
    contents: ｢index｣
    meta: ｢Array=[
    	Array=[]
    ]｣
    place: ｢Adding index entries to your text｣
    target: ｢index-entry-index｣
  </markup-X>
  . 
  <markup-X>
    contents: ｢Index entries｣
    meta: ｢Array=[
    	Array=[
    			"index",
    			"entry"
    	]
    ]｣
    place: ｢Adding index entries to your text｣
    target: ｢index-entry-Index_entries｣
  </markup-X>
   may be specified with 
  <markup-X>
    contents: ｢subentries｣
    meta: ｢Array=[
    	Array=[
    			"index",
    			"subentry"
    	]
    ]｣
    place: ｢Adding index entries to your text｣
    target: ｢index-entry-subentries｣
  </markup-X>
  , including 
  <markup-X>
    contents: ｢multilevel subentries｣
    meta: ｢Array=[
    	Array=[
    			"index",
    			"subentry",
    			"multilevel"
    	]
    ]｣
    place: ｢Adding index entries to your text｣
    target: ｢index-entry-multilevel_subentries｣
  </markup-X>
  , though a renderer is not required to represent anything more than the 
  <markup-X>
    contents: ｢first level｣
    meta: ｢Array=[
    	Array=[
    			"index",
    			"subentry",
    			"rendering"
    	]
    ]｣
    place: ｢Adding index entries to your text｣
    target: ｢index-entry-first_level｣
  </markup-X>
  . A single index entry can specify 
  <markup-X>
    contents: ｢two or more separate entries in the index｣
    meta: ｢Array=[
    	Array=[
    			"index"
    	],
    	Array=[
    			"index",
    			"multiple entries"
    	],
    	Array=[
    			"index",
    			"entry",
    			"nested"
    	]
    ]｣
    place: ｢Adding index entries to your text｣
    target: ｢index-entry-two_or_more_separate_entries_in_the_index｣
  </markup-X>
  , all of which will refer back to the same point in the text. ｣
    inline: ｢False｣
    target: ｢0d5052e｣
  </para>
  
  <head>
    caption: ｢Scoping examples｣
    contents: ｢Scoping examples｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢｣
    target: ｢Scoping_examples｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢Configuration and aliases are scoped. ｣
    inline: ｢False｣
    target: ｢6019325｣
  </para>
  
  <para>
    contents: ｢Without configuration 
  <markup-C>
    contents: ｢embedded B<markup> is rendered｣
  </markup-C>
   verbatim. ｣
    inline: ｢False｣
    target: ｢859ecbf｣
  </para>
  
  <section>
    contents: ｢
  <para>
    contents: ｢With configuration 
  <markup-C>
    allow: ｢B｣
    contents: ｢embedded 
  <markup-B>
    contents: ｢basis｣
  </markup-B>
   markup｣
  </markup-C>
   is rendered. ｣
    inline: ｢False｣
    target: ｢b761c19｣
  </para>
  
  <para>
    contents: ｢How short the season when 
  <markup-A>
    contents: ｢roses are red｣
    error: ｢False｣
    error-text: ｢｣
  </markup-A>
  . ｣
    inline: ｢False｣
    target: ｢d30c52b｣
  </para>｣
    id: ｢｣
  </section>
  
  <para>
    contents: ｢But configuration directives 
  <markup-C>
    contents: ｢only B<apply> inside｣
  </markup-C>
   a block scope. ｣
    inline: ｢False｣
    target: ｢989303b｣
  </para>
  
  <para>
    contents: ｢Did I mention before that: 
  <markup-A>
    contents: ｢
  <markup-A>
    contents: ｢
  <markup-A>
    contents: ｢Do not consider this a disquisition of possible combinations.｣
    error: ｢False｣
    error-text: ｢｣
  </markup-A>
  ｣
    error: ｢False｣
    error-text: ｢｣
  </markup-A>
  ｣
    error: ｢False｣
    error-text: ｢｣
  </markup-A>
   ｣
    inline: ｢False｣
    target: ｢253363b｣
  </para>
  
  <head>
    caption: ｢Placements｣
    contents: ｢Placements｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢｣
    target: ｢Placements｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢Renderers are required to place text and RakuDoc sources, but may fallback to text messages for other formats. ｣
    inline: ｢False｣
    target: ｢bef1786｣
  </para>
  
  <place>
    caption: ｢List=(
    	"Text",
    	"placement"
    )｣
    content-type: ｢text/plain; charset=utf-8｣
    contents: ｢ABSOLUTELY NO WARRANTY IS IMPLIED. NOT EVEN OF ANY KIND. WE HAVE SOLD
    YOU THIS SOFTWARE WITH NO HINT OF A SUGGESTION THAT IT IS EITHER USEFUL
    OR USABLE. AS FOR GUARANTEES OF CORRECTNESS...DON'T MAKE US LAUGH! AT
    SOME TIME IN THE FUTURE WE MIGHT DEIGN TO SELL YOU UPGRADES THAT PURPORT
    TO ADDRESS SOME OF THE APPLICATION'S MANY DEFICIENCIES, BUT NO PROMISES
    THERE EITHER. WE HAVE MORE LAWYERS ON STAFF THAN YOU HAVE TOTAL
    EMPLOYEES, SO DON'T EVEN *THINK* ABOUT SUING US. HAVE A NICE DAY.
    ｣
    headlevel: ｢2｣
    html: ｢False｣
    keep-format: ｢False｣
    schema: ｢https｣
    target: ｢Text_placement｣
    uri: ｢https://github.com/Raku/RakuDoc-GAMMA/raw/main/compliance-files/fanciful-disclaimer.txt｣
    uri-body: ｢//github.com/Raku/RakuDoc-GAMMA/raw/main/compliance-files/fanciful-disclaimer.txt｣
  </place>
  
  <place>
    caption: ｢List=(
    	"RakuDoc",
    	"placement"
    )｣
    content-type: ｢text/plain; charset=utf-8｣
    contents: ｢
  <rakudoc>
    contents: ｢
  <head>
    caption: ｢A ware｣
    contents: ｢A ware｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢｣
    target: ｢A_ware｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢Absolutely no warranty is implied. 
  <markup-B>
    contents: ｢Not even of any kind｣
  </markup-B>
  . We have sold you this 
  <markup-C>
    contents: ｢software｣
  </markup-C>
   with no hint of a suggestion that it is either useful or usable. As for guarantees of correctness...don't make us laugh! ｣
    inline: ｢False｣
    target: ｢f774973｣
  </para>
  
  <head>
    caption: ｢B ware｣
    contents: ｢B ware｣
    id: ｢｣
    level: ｢1｣
    numeration: ｢｣
    target: ｢B_ware｣
    toc: ｢True｣
  </head>
  
  <para>
    contents: ｢At 
  <markup-U>
    contents: ｢some｣
  </markup-U>
   time in the future we might deign to sell you upgrades that purport to address some of the application's many deficiencies, but no promises there either. We have more lawyers on staff than you have total employees, so don't even 
  <markup-B>
    contents: ｢
  <markup-I>
    contents: ｢think｣
  </markup-I>
  ｣
  </markup-B>
   about suing us. ｣
    inline: ｢False｣
    target: ｢2f1d3ba｣
  </para>
  
  <para>
    contents: ｢Have a nice day. 
  <markup-E>
    contents: ｢☺｣
  </markup-E>
   ｣
    inline: ｢False｣
    target: ｢a059ab7｣
  </para>｣
  </rakudoc>｣
    headlevel: ｢2｣
    html: ｢False｣
    keep-format: ｢False｣
    schema: ｢https｣
    target: ｢RakuDoc_placement｣
    uri: ｢https://github.com/Raku/RakuDoc-GAMMA/raw/main/compliance-files/bootiful-disclaimer.rakudoc｣
    uri-body: ｢//github.com/Raku/RakuDoc-GAMMA/raw/main/compliance-files/bootiful-disclaimer.rakudoc｣
  </place>
  
  <place>
    caption: ｢List=(
    	"HTML",
    	"placement"
    )｣
    content-type: ｢text/plain; charset=utf-8｣
    contents: ｢<html>
    <head>
        <meta content-type="text/html; charset=utf-8" />
        <title>Complete disclaimer</title>
    </head>
    <body>
    <h1>A ware</h1>
    
    Absolutely no warranty is implied. <B>Not even of any kind</B>. We have sold
    you this <code>software</code> with no hint of a suggestion that it is either useful
    or usable. As for guarantees of correctness...don't make us laugh!
    
    <h1>B ware</h1>
    
    At <U>some</U> time in the future we might deign to sell you upgrades that purport
    to address some of the application's many deficiencies, but no promises
    there either. We have more lawyers on staff than you have total
    employees, so don't even <B>think</B> about suing us.
    
    Have a nice day. &#x263A;
    </body>
    </html>｣
    headlevel: ｢2｣
    html: ｢True｣
    keep-format: ｢False｣
    schema: ｢https｣
    target: ｢HTML_placement｣
    uri: ｢https://github.com/Raku/RakuDoc-GAMMA/raw/main/compliance-files/paneful-disclaimer.html｣
    uri-body: ｢//github.com/Raku/RakuDoc-GAMMA/raw/main/compliance-files/paneful-disclaimer.html｣
  </place>
  
  <place>
    caption: ｢List=(
    	"JPEG",
    	"image",
    	"placement"
    )｣
    content-type: ｢image/jpeg｣
    contents: ｢"Binary object with 28426 bytes"｣
    headlevel: ｢2｣
    keep-format: ｢False｣
    schema: ｢https｣
    target: ｢JPEG_image_placement｣
    uri: ｢https://github.com/Raku/RakuDoc-GAMMA/raw/main/compliance-files/camelia.jpeg｣
    uri-body: ｢//github.com/Raku/RakuDoc-GAMMA/raw/main/compliance-files/camelia.jpeg｣
  </place>
  
  <place>
    caption: ｢List=(
    	"Png",
    	"image",
    	"placement"
    )｣
    content-type: ｢image/png｣
    contents: ｢"Binary object with 26389 bytes"｣
    headlevel: ｢2｣
    keep-format: ｢False｣
    schema: ｢https｣
    target: ｢Png_image_placement｣
    uri: ｢https://github.com/Raku/RakuDoc-GAMMA/raw/main/compliance-files/camelia.png｣
    uri-body: ｢//github.com/Raku/RakuDoc-GAMMA/raw/main/compliance-files/camelia.png｣
  </place>
  
  <para>
    contents: ｢Text finishes after version number ｣
    inline: ｢False｣
    target: ｢8ec3517｣
  </para>
  
  <place>
    caption: ｢Credits｣
    content-type: ｢text｣
    contents: ｢(PCell): ｢semantic_AUTHORS UNAVAILABLE｣｣
    keep-format: ｢True｣
    schema: ｢semantic｣
    target: ｢Credits｣
    uri: ｢semantic:AUTHORS｣
    uri-body: ｢AUTHORS｣
  </place>
  
  <place>
    caption: ｢LICENSE｣
    content-type: ｢text｣
    contents: ｢(PCell): ｢semantic_LICENSE UNAVAILABLE｣｣
    keep-format: ｢True｣
    schema: ｢semantic｣
    target: ｢LICENSE_0｣
    uri: ｢semantic:LICENSE｣
    uri-body: ｢LICENSE｣
  </place>
  
  <place>
    caption: ｢VERSION｣
    content-type: ｢text｣
    contents: ｢(PCell): ｢semantic_VERSION UNAVAILABLE｣｣
    keep-format: ｢True｣
    schema: ｢semantic｣
    target: ｢VERSION_0｣
    toc: ｢False｣
    uri: ｢semantic:VERSION｣
    uri-body: ｢VERSION｣
  </place>｣
    one-option: ｢first｣
  </rakudoc>
  ｣
  footnotes: ｢
  <footnotes>
    footnotes: ｢Array=[
    	Hash={
    			:contents((PStr): such as this one),
    			:fnNumber(1),
    			:fnTarget("fn_target_N<such_as_this_one>"),
    			:retTarget("N<such_as_this_one>")
    	}
    ]｣
  </footnotes>
  ｣
  front-matter: ｢preface｣
  modified: ｢2024-07-28T15:13:59Z｣
  name: ｢resources/compliance-rendering/rakudociem-ipsum.rakudoc.txt｣
  rendered-index: ｢
  <index>
    caption: ｢Index｣
    index-list: ｢Array=[
    	"\n<index-item>\n  entry: ｢elements to be placed｣\n  level: ｢1｣\n  refs: ｢Array=[\n  \tHash=\{\n  \t\t\t:place(\"This is third level heading\"),\n  \t\t\t:target(\"index-entry-elements_to_be_placed\")\n  \t}\n  ]｣\n</index-item>\n",
    	"\n<index-item>\n  entry: ｢formatting code｣\n  level: ｢1｣\n  refs: ｢Array=[\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-formatting_code\")\n  \t}\n  ]｣\n</index-item>\n",
    	"\n<index-item>\n  entry: ｢index｣\n  level: ｢1｣\n  refs: ｢Array=[\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-index_entry\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-index\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-Index_entries\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-subentries\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-multilevel_subentries\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-first_level\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n  \t}\n  ]｣\n</index-item>\n",
    	"\n<index-item>\n  entry: ｢entry｣\n  level: ｢2｣\n  refs: ｢Array=[\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-index_entry\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-Index_entries\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n  \t}\n  ]｣\n</index-item>\n",
    	"\n<index-item>\n  entry: ｢nested｣\n  level: ｢3｣\n  refs: ｢Array=[\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n  \t}\n  ]｣\n</index-item>\n",
    	"\n<index-item>\n  entry: ｢multiple entries｣\n  level: ｢2｣\n  refs: ｢Array=[\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n  \t}\n  ]｣\n</index-item>\n",
    	"\n<index-item>\n  entry: ｢subentry｣\n  level: ｢2｣\n  refs: ｢Array=[\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-subentries\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-multilevel_subentries\")\n  \t},\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-first_level\")\n  \t}\n  ]｣\n</index-item>\n",
    	"\n<index-item>\n  entry: ｢multilevel｣\n  level: ｢3｣\n  refs: ｢Array=[\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-multilevel_subentries\")\n  \t}\n  ]｣\n</index-item>\n",
    	"\n<index-item>\n  entry: ｢rendering｣\n  level: ｢3｣\n  refs: ｢Array=[\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-first_level\")\n  \t}\n  ]｣\n</index-item>\n",
    	"\n<index-item>\n  entry: ｢inline formatting｣\n  level: ｢1｣\n  refs: ｢Array=[\n  \tHash=\{\n  \t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t:target(\"index-entry-formatting_code\")\n  \t}\n  ]｣\n</index-item>\n"
    ]｣
  </index>
  ｣
  rendered-toc: ｢
  <toc>
    caption: ｢Table of Contents｣
    toc: ｢Array[Hash]=(
    	Hash={
    			:caption("SYNOPSIS"),
    			:level(1),
    			:target("SYNOPSIS")
    	},
    	Hash={
    			:caption("Purpose"),
    			:level(1),
    			:numeration(""),
    			:target("Purpose")
    	},
    	Hash={
    			:caption(List=(
    				"Short",
    				"table",
    				"of",
    				"contents"
    			)),
    			:level(1),
    			:target("Short_table_of_contents")
    	},
    	Hash={
    			:caption(List=(
    				"A",
    				"short",
    				"index"
    			)),
    			:level(1),
    			:target("A_short_index")
    	},
    	Hash={
    			:caption("This is a first heading"),
    			:level(1),
    			:numeration(""),
    			:target("This_is_a_first_heading")
    	},
    	Hash={
    			:caption("This is a second level heading"),
    			:level("2"),
    			:numeration(""),
    			:target("This_is_a_second_level_heading")
    	},
    	Hash={
    			:caption("This is third level heading"),
    			:level("3"),
    			:numeration(""),
    			:target("This_is_third_level_heading")
    	},
    	Hash={
    			:caption("This is a numbered heading, level 1"),
    			:level(1),
    			:numeration((PStr): 
    			<numhead>
    			  caption: ｢This is a numbered heading, level 1｣
    			  contents: ｢This is a numbered heading, level 1｣
    			  id: ｢｣
    			  level: ｢1｣
    			  numeration: ｢1.｣
    			  target: ｢This_is_a_numbered_heading,_level_1｣
    			  toc: ｢True｣
    			</numhead>),
    			:target("This_is_a_numbered_heading,_level_1")
    	},
    	Hash={
    			:caption("This is a second level heading"),
    			:level("2"),
    			:numeration((PStr): 
    			<numhead>
    			  caption: ｢This is a second level heading｣
    			  contents: ｢This is a second level heading｣
    			  id: ｢｣
    			  level: ｢2｣
    			  numeration: ｢1.1.｣
    			  target: ｢This_is_a_second_level_heading_0｣
    			  toc: ｢True｣
    			</numhead>),
    			:target("This_is_a_second_level_heading_0")
    	},
    	Hash={
    			:caption("A third level"),
    			:level("3"),
    			:numeration((PStr): 
    			<numhead>
    			  caption: ｢A third level｣
    			  contents: ｢A third level｣
    			  id: ｢｣
    			  level: ｢3｣
    			  numeration: ｢1.1.1.｣
    			  target: ｢A_third_level｣
    			  toc: ｢True｣
    			</numhead>),
    			:target("A_third_level")
    	},
    	Hash={
    			:caption("Another third level"),
    			:level("3"),
    			:numeration((PStr): 
    			<numhead>
    			  caption: ｢Another third level｣
    			  contents: ｢Another third level｣
    			  id: ｢｣
    			  level: ｢3｣
    			  numeration: ｢1.1.2.｣
    			  target: ｢Another_third_level｣
    			  toc: ｢True｣
    			</numhead>),
    			:target("Another_third_level")
    	},
    	Hash={
    			:caption("Back to second"),
    			:level("2"),
    			:numeration((PStr): 
    			<numhead>
    			  caption: ｢Back to second｣
    			  contents: ｢Back to second｣
    			  id: ｢｣
    			  level: ｢2｣
    			  numeration: ｢1.2.｣
    			  target: ｢Back_to_second｣
    			  toc: ｢True｣
    			</numhead>),
    			:target("Back_to_second")
    	},
    	Hash={
    			:caption("A third level"),
    			:level("3"),
    			:numeration((PStr): 
    			<numhead>
    			  caption: ｢A third level｣
    			  contents: ｢A third level｣
    			  id: ｢｣
    			  level: ｢3｣
    			  numeration: ｢1.2.1.｣
    			  target: ｢A_third_level_0｣
    			  toc: ｢True｣
    			</numhead>),
    			:target("A_third_level_0")
    	},
    	Hash={
    			:caption("Another third level"),
    			:level("3"),
    			:numeration((PStr): 
    			<numhead>
    			  caption: ｢Another third level｣
    			  contents: ｢Another third level｣
    			  id: ｢｣
    			  level: ｢3｣
    			  numeration: ｢1.2.2.｣
    			  target: ｢Another_third_level_0｣
    			  toc: ｢True｣
    			</numhead>),
    			:target("Another_third_level_0")
    	},
    	Hash={
    			:caption("Lists"),
    			:level(1),
    			:numeration(""),
    			:target("Lists")
    	},
    	Hash={
    			:caption("Taking a bullet"),
    			:level("2"),
    			:numeration(""),
    			:target("Taking_a_bullet")
    	},
    	Hash={
    			:caption("Blocks that are processed differently"),
    			:level(1),
    			:numeration(""),
    			:target("Blocks_that_are_processed_differently")
    	},
    	Hash={
    			:caption(List=(
    				"Unrelenting",
    				"hype"
    			)),
    			:level(2),
    			:target("Unrelenting_hype")
    	},
    	Hash={
    			:caption(List=(
    				"Fabulous",
    				"identity"
    			)),
    			:level(1),
    			:numeration(""),
    			:target("Formula_cannot_be_rendered")
    	},
    	Hash={
    			:caption(List=(
    				"A",
    				"customised",
    				"block"
    			)),
    			:level(2),
    			:numeration(""),
    			:target("A_customised_block")
    	},
    	Hash={
    			:caption(List=(
    				"This",
    				"is",
    				"an",
    				"extraordinary",
    				"paragraph"
    			)),
    			:level(1),
    			:numeration(""),
    			:target("This_is_an_extraordinary_paragraph")
    	},
    	Hash={
    			:caption("Some tables"),
    			:level(1),
    			:numeration(""),
    			:target("Some_tables")
    	},
    	Hash={
    			:caption(List=(
    				"A",
    				"visual",
    				"table"
    			)),
    			:level(2),
    			:numeration(""),
    			:target("A_visual_table")
    	},
    	Hash={
    			:caption(List=(
    				"A",
    				"visual",
    				"table",
    				"with",
    				"a",
    				"stupendously",
    				"long",
    				"caption"
    			)),
    			:level(2),
    			:numeration(""),
    			:target("A_visual_table_with_a_stupendously_long_caption")
    	},
    	Hash={
    			:caption(List=(
    				"A",
    				"procedural",
    				"table"
    			)),
    			:level(2),
    			:numeration(""),
    			:target("A_procedural_table")
    	},
    	Hash={
    			:caption("Adding index entries to your text"),
    			:level(1),
    			:numeration(""),
    			:target("Adding_index_entries_to_your_text")
    	},
    	Hash={
    			:caption("Scoping examples"),
    			:level(1),
    			:numeration(""),
    			:target("Scoping_examples")
    	},
    	Hash={
    			:caption("Placements"),
    			:level(1),
    			:numeration(""),
    			:target("Placements")
    	},
    	Hash={
    			:caption(List=(
    				"Text",
    				"placement"
    			)),
    			:level(2),
    			:target("Text_placement")
    	},
    	Hash={
    			:caption(List=(
    				"RakuDoc",
    				"placement"
    			)),
    			:level(2),
    			:target("RakuDoc_placement")
    	},
    	Hash={
    			:caption("A ware"),
    			:level(1),
    			:numeration(""),
    			:target("A_ware")
    	},
    	Hash={
    			:caption("B ware"),
    			:level(1),
    			:numeration(""),
    			:target("B_ware")
    	},
    	Hash={
    			:caption(List=(
    				"HTML",
    				"placement"
    			)),
    			:level(2),
    			:target("HTML_placement")
    	},
    	Hash={
    			:caption(List=(
    				"JPEG",
    				"image",
    				"placement"
    			)),
    			:level(2),
    			:target("JPEG_image_placement")
    	},
    	Hash={
    			:caption(List=(
    				"Png",
    				"image",
    				"placement"
    			)),
    			:level(2),
    			:target("Png_image_placement")
    	},
    	Hash={
    			:caption("Credits"),
    			:level(1),
    			:target("Credits")
    	},
    	Hash={
    			:caption("LICENSE"),
    			:level(1),
    			:target("LICENSE_0")
    	}
    )｣
    toc-list: ｢Array=[
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"SYNOPSIS\"),\n  \t:level(1),\n  \t:target(\"SYNOPSIS\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"Purpose\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Purpose\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"Short\",\n  \t\t\"table\",\n  \t\t\"of\",\n  \t\t\"contents\"\n  \t)),\n  \t:level(1),\n  \t:target(\"Short_table_of_contents\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"A\",\n  \t\t\"short\",\n  \t\t\"index\"\n  \t)),\n  \t:level(1),\n  \t:target(\"A_short_index\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"This is a first heading\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"This_is_a_first_heading\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"This is a numbered heading, level 1\"),\n  \t:level(1),\n  \t:numeration((PStr): \n  \t<numhead>\n  \t  caption: ｢This is a numbered heading, level 1｣\n  \t  contents: ｢This is a numbered heading, level 1｣\n  \t  id: ｢｣\n  \t  level: ｢1｣\n  \t  numeration: ｢1.｣\n  \t  target: ｢This_is_a_numbered_heading,_level_1｣\n  \t  toc: ｢True｣\n  \t</numhead>),\n  \t:target(\"This_is_a_numbered_heading,_level_1\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"Lists\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Lists\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"Blocks that are processed differently\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Blocks_that_are_processed_differently\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"Unrelenting\",\n  \t\t\"hype\"\n  \t)),\n  \t:level(2),\n  \t:target(\"Unrelenting_hype\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"Fabulous\",\n  \t\t\"identity\"\n  \t)),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Formula_cannot_be_rendered\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"A\",\n  \t\t\"customised\",\n  \t\t\"block\"\n  \t)),\n  \t:level(2),\n  \t:numeration(\"\"),\n  \t:target(\"A_customised_block\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"This\",\n  \t\t\"is\",\n  \t\t\"an\",\n  \t\t\"extraordinary\",\n  \t\t\"paragraph\"\n  \t)),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"This_is_an_extraordinary_paragraph\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"Some tables\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Some_tables\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"A\",\n  \t\t\"visual\",\n  \t\t\"table\"\n  \t)),\n  \t:level(2),\n  \t:numeration(\"\"),\n  \t:target(\"A_visual_table\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"A\",\n  \t\t\"visual\",\n  \t\t\"table\",\n  \t\t\"with\",\n  \t\t\"a\",\n  \t\t\"stupendously\",\n  \t\t\"long\",\n  \t\t\"caption\"\n  \t)),\n  \t:level(2),\n  \t:numeration(\"\"),\n  \t:target(\"A_visual_table_with_a_stupendously_long_caption\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"A\",\n  \t\t\"procedural\",\n  \t\t\"table\"\n  \t)),\n  \t:level(2),\n  \t:numeration(\"\"),\n  \t:target(\"A_procedural_table\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"Adding index entries to your text\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Adding_index_entries_to_your_text\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"Scoping examples\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Scoping_examples\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"Placements\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Placements\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"Text\",\n  \t\t\"placement\"\n  \t)),\n  \t:level(2),\n  \t:target(\"Text_placement\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"RakuDoc\",\n  \t\t\"placement\"\n  \t)),\n  \t:level(2),\n  \t:target(\"RakuDoc_placement\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"A ware\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"A_ware\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"B ware\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"B_ware\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"HTML\",\n  \t\t\"placement\"\n  \t)),\n  \t:level(2),\n  \t:target(\"HTML_placement\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"JPEG\",\n  \t\t\"image\",\n  \t\t\"placement\"\n  \t)),\n  \t:level(2),\n  \t:target(\"JPEG_image_placement\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(List=(\n  \t\t\"Png\",\n  \t\t\"image\",\n  \t\t\"placement\"\n  \t)),\n  \t:level(2),\n  \t:target(\"Png_image_placement\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"Credits\"),\n  \t:level(1),\n  \t:target(\"Credits\")\n  }｣\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ｢Hash=\{\n  \t:caption(\"LICENSE\"),\n  \t:level(1),\n  \t:target(\"LICENSE_0\")\n  }｣\n</toc-item>\n"
    ]｣
  </toc>
  ｣
  source-data: ｢Hash={
  	:index-caption("Index"),
  	:language("en"),
  	:modified(Instant:1721939813.458626338),
  	:name("resources/compliance-rendering/rakudociem-ipsum.rakudoc"),
  	:paragraph-id-length(7),
  	:path("resources/compliance-rendering/rakudociem-ipsum.rakudoc"),
  	:rakudoc-config(Hash={}),
  	:rakudoc-level(0),
  	:rakudoc-title("Preface"),
  	:toc-caption("Table of Contents")
  }｣
  subtitle: ｢A file with many RakuDoc components and some idea about what is expected.｣
  title: ｢Proving a renderer｣
  title-target: ｢Proving_a_renderer｣
  warnings: ｢
  <warnings>
    warnings: ｢Array=[
    	"｢G｣ is not defined, but is reserved for future use in block ｢rakudoc｣ with heading ｢This is third level heading｣.",
    	"｢Q｣ is not defined, but is reserved for future use in block ｢rakudoc｣ with heading ｢This is third level heading｣.",
    	"｢W｣ is not defined, but is reserved for future use in block ｢rakudoc｣ with heading ｢This is third level heading｣.",
    	"｢Y｣ is not defined, but is reserved for future use in block ｢rakudoc｣ with heading ｢This is third level heading｣.",
    	"Unknown or as yet undeclared alias ｢XXX｣ in block ｢rakudoc｣ with heading ｢This is third level heading｣ over-riden by ｢an undeclared｣",
    	"Δ<> markup ignored because it has no version/note content ｢Δ<no versioning here>｣ in block ｢rakudoc｣ with heading ｢This is third level heading｣.",
    	"Markup-M failed: template ｢PayMeMoreApp｣ does not exist. Got ｢M<should not recognise this functionality|PayMeMoreApp; user-id>｣",
    	"No template exists for custom block ｢MyBlock｣. It has been rendered as unknown in block ｢MyBlock｣ with heading ｢MyBlock｣."
    ]｣
  </warnings>
  ｣
</final>
