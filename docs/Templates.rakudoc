=begin rakudoc
=TITLE Templates for RakuDoc-Render
=SUBTITLE Snippets to customise RakuDoc blocks

=head1 Overview

RakuDoc-Render (RR) uses plugins and templates to customise blocks.

The templates are added to an instance of the Template-directory class. This should be
transparent to a user and works like a Hash with some automagical behaviour.
An I<RR> processor instance will add templates to the Template-directory.

When a template is added to Template-directory with the name of an existing
template, the old value is pushed onto a stack, and can be accessed.

The templates are specified as a list of Pairs of the form
=begin code
    # psuedocode
    <key> => -> <Hash>, <Template object> <Block>
    # or as an example
    head => -> %prm, $tmpl { ... }
=end code
where
=item key is a string and serves as the name of the template
=item C<%prm> is an ordinary Hash of the parameters that are accessed inside the block
=item2 In order to access 'contents', the code inside the block would be C< %prm<contents> >
=item2 The name of the Hash parameter is arbitrary, but conventionally is called C<%prm>.
=item C<$tmpl> is a I<Template> object, see below, and conventionally is called C<$tmpl>.
=item The contents of the block is a normal Raku program and should return a Str or PStr (see below).
=item2 The block shown above is the I<pointy> form, so the object returned is the value of the last statement
=begin item2 If the Raku program in the block is more easily written using a C<return> statement, then
a C<sub> form should be used, eg.

    key => sub ( %prm, $tmpl ) { ... }
=end item2

=head1 Template object

The Template object contains a reference to the Template-directory object, so all the templates registered
with the RakuDoc processor can be accessed.

Inside the Raku block of a new template, the following methods can be used on the C<$tmpl> object.

=head2 method B<$tmpl.prev>

This calls the previously defined block of the template with the same name, with the same parameters provided to current block.
The use case is to allow some pre- and (limited) post- processing of the parameters while keeping the previous template.

B<Pre-processing> Suppose a new template is required that merely adds the word 'Chapter' to the contents of a C<=Chapter> block. So the
parameter needs to be preprocessed and the previous template called. Assuming %prm<contents> is a Str.

    chapter => -> %prm, $tmpl {
        %prm<contents> = 'Chapter ' ~ %prm<contents>;
        $tmpl.prev( %prm ); # pass the new value of contents
    }

B<Post-processing> For example, suppose a template 'table' has been defined, but a new template is needed that substitutes the HTML class,
then some post-processing of the old template is sufficient, eg.,

    table => -> %prm, $tmpl {
        ($tmpl.prev).subst( / '<table' \s+ 'class="pod-table' /, '<table class="table is-centered')
    }

This assumes that the return object from both templates I<chapter> and I<table> is a Str, which it could be. But generically,
it is best not to assume this. A fuller example is given below.

=head2 Calling on a Template object

The block registered with key C<aaa> can be called inside another template block, with or without parameters.

I<Without parameters>, eg C<$tmpl<aaa>> or B<$tmpl('aaa')> the other template block is called with the same parameters, eg

    page => -> %prm, $tmpl {
        $tmpl<header> ~ $tmpl<body> ~ $tmpl<footer>
    }
where C<header>, C<body>, and C<footer> are all registered in the I<RR> processor.

I<With parameters>, eg. C<$tmpl('aaa', %( :attr(1), :new-attr<some string> ) )>,
the block registered with the key C<aaa> is called with the new set of parameters specified in the
Hash. It can be used to provide a subset of parameters, or to rename the parameters for a different
template.

=head1 PStr class and concatenation

Some RakuDoc statements make references to structures or data that have not
been completely rendered. These references are embedded in B<PCells>, which contain supplies
that will interpolate the rendering once known.

Consequently, parameters to a template may contain a mixture of Raku I<Str> and I<PCells>, in
an object of type called B<PStr>.

I<PCells> should not be visible to the template user.

If a I<PStr> or I<PCell> is stringified before the data has been rendered, its internal I<id> and
I<UNAVAILABLE> will be the rendered result.

Since the embedded content of a I<PStr> may ony be available after a template has rendered, care must be taken
not be stringify any of the parameters prematurely.

Consequently, the return object from a template should be built from the parameter values
using the concatenation operator C<~>.

=head2 Concatenation to PStr

A PStr is built up by concatenating using the infix operator C<~>. Assignment does not add to a PStr.
Concatenation can be on the left or the right of the PStr and the result will depend on the type.
=item A PCell on the left or right is added to the start or end, respectively, of the PStr
=item Concatentating two PStr adds the right hand one to the left hand one, and returns the left hand one
=item Any other type on the left or right is coerced to a Str and added to the start/end of the PStr

Since left concatenation has an effect on the PStr on the right, use C<sink> to discard the return value,
unless of course the return value is the last line of a block, in which case it is returned as the
value of the block, eg.,

    my PStr $p;
    $p ~= PCell.new( :s($a-supplier.Supply), :id<AAA> );
    sink '<bold>' ~ $p

=head2 Template methods B<lead> and B<tail>

These two methods of a I<PStr> object return any of the B<leading> or B<tailing> (respectively)
I<Str> elements of the I<PStr>. The elements are removed, and so should be concatenated
back on after processing.

For simplicity above, examples were given of pre- and post-processing templates, and treating the
contents of C<%prm> as I<Str>. Since some parameters may contain I<PStr>, more care is needed.
For example, the post-processing should be done as follows:

    table => -> %prm, $tmpl {
        my $rv = $tmpl.prev;
        if $rv ~~ PStr {
            # get leading text
            my $lead = $rv.lead;
            # process the string, if it exists
            $lead.subst( / '<table' \s+ 'class="pod-table' /, '<table class="table is-centered');
            # left concatenate onto the PStr
            $lead ~ $rv
            # concatenating to a PStr results in a PStr, which is the return object
        }
        else { $rv.subst( / '<table' \s+ 'class="pod-table' /, '<table class="table is-centered') }
    }

=end rakudoc