=begin rakudoc
=TITLE Design of RakuDoc v2 renderer

=SUBTITLE Design document for a renderer will render a RakuDoc source that is compliant with RakuDoc version 2.
It uses the RakuAST statement list as input. It is a text oriented renderer, not a code oriented renderer.

=head Requirements

=item Render RakuDoc v2 as specified
=item Allow for customisation
=item2 Custom blocks
=item2 Custom MarkUp
=item2 Customisation via C<M<...>> markup
=item Separate processing of RakuDoc from the output format, eg., HTML, MarkDown, XHTML, pdf.
=item2 C<RakuDoc::To::HTML> is called when C<raku --doc=HTML> is entered at the terminal.
=item2 C<RakuDoc::To::HTML> instantiates the Renderer and supplies what is needed for the output.
=item Allow for multithreading as much as possible.

=head Background

This renderer is based on the experience of writing C<Raku::Pod::Render>, so the following is some background on
RPR, which in turn was mostly based on Pod::To::BigPage.

=head2 Aims

The aims of RPR was to pass all the tests for Pod::To::HTML but for all the HTML formating to be separate from the
rendering. So, RPR initially only handled what Pod::To::HTML handled - not the whole of RakuDoc v1.

The formatting was done for each output by a set of templates. Thus, each output format had its own templates.

C<Pod::To::HTML> was mirrored by having a parent class C<ProcessedPod> that was given HTML templates, whilst
C<Pod::To::MarkDown> was mirrored by providing MarkDown templates.

An effort was made to make RPR neutral about the templating engine, and templates could be written in
Mustache. For speed and convenience, a new Templating engine was written called RakuClosure.

=head2 Process flow

=item an instance of a ProcessedPod (a processor) is created
=item a set of templates must be provided to the processor
=item2 a check is made that the minimum set of keys is provided
=item plugins are attached to the processor, each plugin may provide additional templates and custom data.
=item the processor method C<process-pod> is called with the compiled version of C<$=pod>, which
is an Array of C<Pod::Blocks>.

=item2 A new instance of the PODF class is created, and accumulates (different structures for each data type)
=item3 the Table of Contents data (from headings and custom blocks),
=item3 Index (glossary) (from C<X<>> markup),
=item3 Footnotes,
=item3 Links,
=item3 the rendered body for each block
=item2 each C<Pod::Block> (PB) has its own handler. Handlers update the PODF object.
=item2 constraints are checked (eg., unique id's for each header)
=item the processor method C<source-wrap> is called
=item2 the meta data (ToC, glossary, footnotes) are rendered using templates
=item2 the parameters for the templates are taken from the PODF object
=item2 finally, the source-wrap template is used, which expects the body, and rendered ToC and other data
=item the PODF object can be detached from the processor, and the processor used for a new RakuDoc source.

=head2 Template management
=item a minimum set of templates is required
=item2 originally requiring a minimum set was intended to be able to catch unknown templates would be caught before processing started
=item new versions of existing templates can be added.
=item2 adding a new version of an existing template, adds it to a linked list
=item each template can call other templates
=item2 so in fact unknown templates could be called during processing
=item2 a template can call a previous version of itself

The C<ProcessedPod> object contains a hash of templates, eg.
=begin code
    %.tmpl = %(
        # format-b is called by the handler for B<  >
        format-b => sub ( %prm, %tml --> Str ) {
            qq :to/TMPL/;
                <b>{ %prm<contents> }</b>
            TMPL
        },
        # keys for all the other templates
    );
=end code

The handler for C<B< > > can then call the sub with the parameters and get a string, eg.
=begin code
    my $returnvalue =  %.tmpl<format-b>.( %( contents => $node.contents, ), %.tmpl );
=end code

Any template can then call other templates from the C<%tml> hash.

Later a plugin can contain a callable that returns a hash of templates, eg.
=begin code
    use v6.d;
    %(
        format-b => sub ( %prm, %tml --> Str ) {
            qq :to/TMPL/;
                <strong>{ %prm<contents> }</strong>
            TMPL
        },
    )
=end code

Simplistically, the new value of C<format-b> overwrites the previous value.

Actually, C<%.tmpl> is not an ordinary hash, but an extended hash so that C<%.tmpl<format-b>>
accesses the most recent value, but C<%.tmpl<format-b>.prior> accesses the next value of the linked list.

The use case of this was to have a plugin that pre-processes headings in order to extract information,
but then uses the preceding template to actually render the template. So the rendering the heading is separated
from the pre-processing of the heading.

=head2 Combination of RPR and Collection

Collection links together multiple RakuDoc sources using a pipeline of actions, include
rendering with RPR.

The idea behind Collection is that information about the entire website (such as a list of files
together with their metadata) is added to the Processor by a plugin, and the information is then
available when a custom block is encountered in a RakuDoc source file (eg C<=Listfiles>).

When a template for the custom block (eg. C<=Listfiles>) is called, it can access the custom data
that has been attached to the processor instance because the block handler for a Custom block
automatically provides the data associated with the block name as one of the parameters to the
template.

This also means that block templates cannot access data from other plugins.

=head2 Flaws

=item It turned out that making PRP neutral about the templating engine was not justified. Mustache does not have
processing capacity - by design. Mustache was also very slow when handling lots of files as it was difficult
to parallise.

=item Initially, highlighting was handled within the code for the C<=code> blocks, but then this was spun off
into a separate role, and then moved into a plugin. The plugin replaces the default template for code-blocks.

=item A full set of templates, one for each C<Pod::Block> type and for rendering structures such as Footnotes,
ToC, and Index (glossary), was required before the class instance could be used. But templates can use other
templates, and an error has to be thrown when a template is called, but is not declared.
So the idea of maintaining a set of default templates seems redundant.

=item It is useful for plugins to modify existing templates, but to be able to call previous ones.
Templates are therefore stored as a linked list, but the syntax is not optimal.

=item The original idea was that plugins - at the rendering stage - provide the name of the block,
and the template used for the block. Since by default when a RakuDoc file comes across  a custom block,
RPR calls a template associated with that name, there is no need to specify separately the name of the custom block.
This extra information is redundant.

=item The original idea was to allow for plugins to provide new templates that could be used for existing
blocks, eg., a quotation para that would be called by the handler for `Pod::Block::Para`. However, the RakuDoc
source has to be changed to add (eg) `:template<quotation>`, but it could quite easily be changed to have
`=QuotationPara`. So supporting `:template` for all blocks is redundant.

=item Although the template mechanism works well and is flexible, there is too much boiler plate for each
template. All RakuClosure templates have the form C< key => sub (%prm, %tml) { ... } >.

=item The meta document structures, such as Footnotes, ToC, and glossary (aka index) cannot be easily accessed
within templates. A plugin can create custom data which is then available to other templates. So, this would
indicate that all meta document structures should be handled in a uniform way with plugins.

=item the module C<Pod::To::HTML2> which is distributed with RPR has to simulate the post-processing plugins
because RPR only has plugins for the rendering stage. C<Collection> has plugins for different stages.

=item Several RakuDoc v1 functions, eg. I<Alias>, were not implemented.

=head2 Lessons

=item RPR extensively uses plugins (more later), even though they were not a part of the initial design. Plugins
are useful because

=item2 They allow for the customisation of blocks. A plugin can be created that adds a template to the
existing list. The most recent template added is called first.

=item2 Collection, which calls RPR, also uses plugins, but allows for pre-processing and post-processing functions.
=item3 Pre-processing is not needed for C<Pod::To::HTML> for a standalone file, but it is useful for changing the
pathname of an input file (eg., the C<docs> directory has C<docs/Language/operators.rakudoc> or
C<docs/Type/IO.rakudoc> but within the
sources these files are referenced as C</language/operators> and C</type/IO> - only one part of the source
name is changed)

=item3 Post-processing is needed for a standalone HTML file, for example, to collect all CSS or JS files
specified in different plugins (different custom blocks), or to collect images. Links to the CSS need to be
included in the head part of the HTML file.

=item3 Data can be collected during processing and passed back to the render for use by later plugins.

=item2 Different output formats require additional files, eg., CSS and JS files for HTML. If a custom block
exposes an online service (eg. Leaflet maps), then user tokens need to be included with the configuration.

=item3 The original idea was to have an Asset cache with RPR in order to manage assets. This was too
restrictive and required more knowledge to write a plugin.

=item3 All the information for a custom block can be held together by defining a plugin
=item3 Plugin information is more conveniently manipulated by pre- or post-processing plugins.

=head1 New design

The render method of an instance of the RakuAST-Render (RR) class
transforms a RakuAST statement list (the methods input) into a ProcessedRakuDoc object (returned object).

If the RR instance has not been modified, the Stringification of the ProcessedRakuDoc (RPD) object will be
a text version of the RakuDoc source.

The RR instance may be modified by providing one or more templates and data for each component name,
in which case stringifying the RPD object will produce a render that is dependent on the templates.

To produce a rendering in an output (eg. HTML), the calling software will
=item create an RR object (the I<processor>), eg. C<my RakuAST-Render $pocessor .= new ;>
=item attach templates and data to the I<processor>,
=item obtain the RakuAST list from the RakuDoc source, eg C<my $ast = 'filename'.IO.slurp.AST.rakudoc>
=item obtain a RPD object by calling render on processor, eg. C<my $obj = $processor.render($ast)>
=item stringify the RPD object (string output), eg., C<my $str = $obj.Str>
=item save the string output as a file
=item save extra assets required (eg. for HTML: image, CSS and JS files in directories consistent with
information provided in template files)

=head2 RakuAST-Render (RR) class

=head3 render( RakuAST::Block @list, :%meta --> ProcessedRakuDoc )

Creates a new ProcessedRakuDoc object from the RakuAST::BLock list.

If %meta is given, then the keys/values are added to the source-data structure of the RR object.

=head3 add plugin( Str $path-to-plugin-directory )

TO BE DETERMINED

=head2 ProcessedRakuDoc (RPD) class

=head3 Object structures

=item body (string of rendered source, may contain Promises during rendering)
=item data about the source
=item2 this might include
=item3 file name
=item3 path name
=item3 modification time of source file
=item2 data about the source can be attached with render, see below)
=item2 data about the source may also be generated by templates, eg. meta data attached to rakudoc block
=item the Table of Contents data (from headings and custom blocks),
=item Index (glossary) (from C<X<>> markup),
=item Footnotes,
=item Links (internal, local, external), (from C<L<>> markup)
=item2 Internal are of the form C<#this is a heading> and refer to anchors inside the file
=item2 Local are of the form C<some-type#a heading there>, where I<some-type> is a file name in the same directory
=item2 External is a fully qualified URL
=item Targets (generated from block names and :id metadata)
=item Aliases
=item Definitions
=item Semantic blocks (which includes TITLE & SUBTITLE)
=item Unknown templates (by default all components are rendered in some way)

=head2 Class methods

=head3 Str

=item Each of the base structures (Body, ToC, Index, and Footnotes) are rendered to a string using templates of the same name.
=item The base structures are combined using the I<Wrap> template
=item The method returns a string under all circumstances, even if there are errors.

=head2 Verify

It seems to me to be useful to have one method that produces some output, and another that does verification for debugging purposes.

Method should be called before Str, which will emit a string if it can even if there are undefined / incomplete values

Checks the following:
=item Unknown templates structure is empty
=item All the promises in Body have been kept
=item All internal links are satisfied by an element in the targets structure

Throws an exception if any of the above are not true.

=end rakudoc