
<final>
  body: ï½¢
<rakudoc>
  another-option: ï½¢2ï½£
  contents: ï½¢
<semantic>
  caption: ï½¢SYNOPSISï½£
  contents: ï½¢<para>
  contents: ï½¢Assuming a new renderer has been developed and installed (eg using 
<markup-I>
  contents: ï½¢zefï½£
  delta: ï½¢List=()ï½£
</markup-I>
) at 
<markup-B>
  contents: ï½¢Rakudoc::To::MyRenderï½£
  delta: ï½¢List=()ï½£
</markup-B>
, the render this file using a 
<markup-C>
  contents: ï½¢raku --doc=MyRendererï½£
  delta: ï½¢List=()ï½£
</markup-C>
 terminal command. The renderer will be consistent with the RakuDoc v2 specification
if all the blocks are rendered appropriately, and warnings are generated by
the incorrect statements below. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢b1af75b9e5f3419b792d064549f6fe285467f40dï½£
</para>ï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢1ï½£
  target: ï½¢SYNOPSISï½£
</semantic>

<head>
  caption: ï½¢Purposeï½£
  contents: ï½¢Purposeï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢1ï½£
  numeration: ï½¢ï½£
  target: ï½¢Purposeï½£
  toc: ï½¢Trueï½£
</head>

<para>
  contents: ï½¢This file is intended to prove a RakuDoc v2 renderer. It can be
used in several ways: ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢8829f8cb03e15ebcbfcdffc0a7a5b9508289b7b1ï½£
</para>

<item-list>
  item-list: ï½¢Array=[
  	(PStr): 
  	<item>
  	  contents: ï½¢to generate the AST representation of all the RakuDoc components
in the specificationï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢1ï½£
  	</item>
  ,
  	(PStr): 
  	<item>
  	  contents: ï½¢to prove a renderer that a new renderer should be able to process
this fileï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢1ï½£
  	</item>
  ,
  	(PStr): 
  	<item>
  	  contents: ï½¢to visualise how the final output of a RakuDoc source will look-
 after processingï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢1ï½£
  	</item>
  
  ]ï½£
</item-list>

<para>
  contents: ï½¢An attempt has been made to utilise all RakuDoc components, it
is not an exhaustive test of all components in all possible combinations. Please
suggest additional combinations if they turn out to have unusual effects. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢d6034c1a9ee031a2aaab4c92e5170a07aa1f56c2ï½£
</para>

<para>
  contents: ï½¢Several 
<markup-I>
  contents: ï½¢mistakesï½£
  delta: ï½¢List=()ï½£
</markup-I>
 have been included where the RakuDoc v2 specification indicates how inconsistent
behaviours or unknown components should be handled. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢ba6f2295638218ab31f5e1662014219f3936874aï½£
</para>

<para>
  contents: ï½¢The the end of the rendering of this source file, a number of warn-
ing messages should be included. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢9d9135b34eb1e7dc2f593fbb4c9c6dbb9d6a1df2ï½£
</para>

<place>
  caption: ï½¢List=(
  	"The",
  	"table",
  	"of",
  	"contents"
  )ï½£
  contents: ï½¢(PCell): ï½¢toc-schema UNAVAILABLEï½£ï½£
  delta: ï½¢List=()ï½£
  html: ï½¢Falseï½£
  keep-format: ï½¢Trueï½£
  schema: ï½¢tocï½£
</place>

<place>
  caption: ï½¢List=(
  	"A",
  	"short",
  	"index"
  )ï½£
  contents: ï½¢(PCell): ï½¢index-schema UNAVAILABLEï½£ï½£
  delta: ï½¢List=()ï½£
  html: ï½¢Falseï½£
  keep-format: ï½¢Trueï½£
  schema: ï½¢indexï½£
</place>

<head>
  caption: ï½¢This is a first headingï½£
  contents: ï½¢This is a first headingï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢1ï½£
  numeration: ï½¢ï½£
  target: ï½¢This_is_a_first_headingï½£
  toc: ï½¢Trueï½£
</head>

<para>
  contents: ï½¢text ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢70ad9d467776969c23717c7f56a00f439170d167ï½£
</para>

<head>
  caption: ï½¢This is a second level headingï½£
  contents: ï½¢This is a second level headingï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢2ï½£
  numeration: ï½¢ï½£
  target: ï½¢This_is_a_second_level_headingï½£
  toc: ï½¢Trueï½£
</head>

<para>
  contents: ï½¢text ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢70ad9d467776969c23717c7f56a00f439170d167ï½£
</para>

<head>
  caption: ï½¢This is third level headingï½£
  contents: ï½¢This is third level headingï½£
  delta: ï½¢List=(
  	"v2|developers",
  	""
  )ï½£
  id: ï½¢ï½£
  level: ï½¢3ï½£
  numeration: ï½¢ï½£
  target: ï½¢This_is_third_level_headingï½£
  toc: ï½¢Trueï½£
</head>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-B>
  contents: ï½¢Basis typeï½£
  delta: ï½¢List=()ï½£
</markup-B>
 formatting. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢e3948272ed183c97901c6166e12ced886dae9ae2ï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-I>
  contents: ï½¢Important typeï½£
  delta: ï½¢List=()ï½£
</markup-I>
 formatting. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢5c805badf44b23678a5e3ca7ef01dd8c1f6ee308ï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-U>
  contents: ï½¢Unusual typeï½£
  delta: ï½¢List=()ï½£
</markup-U>
 formatting. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢5d1e737319ea04bb8805ff57636b7f97ab19f65bï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-O>
  contents: ï½¢Strikethrough typeï½£
  delta: ï½¢List=()ï½£
</markup-O>
 formatting. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢c7d989da3bdf70fab5682712d1a352de40ec15c4ï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-H>
  contents: ï½¢Superscript typeï½£
  delta: ï½¢List=()ï½£
</markup-H>
 formatting. (For text output, many terminals do not support superscript/subscript
font positions, so consider using a colouration as well.) ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢3b38b447c643bca6d4be0a3afa1c233cc05328bfï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-J>
  contents: ï½¢Subscript typeï½£
  delta: ï½¢List=()ï½£
</markup-J>
 formatting. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢eec44ea41df8233f2e4fc28c064f726d99a5061aï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-C>
  contents: ï½¢Code typeï½£
  delta: ï½¢List=()ï½£
</markup-C>
 formatting. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢dbe23892512f5ad80568ad2e3024afb4ad538920ï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-V>
  contents: ï½¢Verbatim typeï½£
  delta: ï½¢List=()ï½£
</markup-V>
 formatting. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢fada8ffae7495e1f550e56644f502fb268e87290ï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate some >< formatting (in the source has 
<markup-V>
  contents: ï½¢Z<Zero width>ï½£
  delta: ï½¢List=()ï½£
</markup-V>
 between >< ). ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢06dc9fef26f37a9281b255754395a9a4a1f63e77ï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-K>
  contents: ï½¢Keyboardï½£
  delta: ï½¢List=()ï½£
</markup-K>
 formatting. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢0d619d5b602f479b07a6ff8ca745ab5eb6c06d17ï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-R>
  contents: ï½¢Replacementï½£
  delta: ï½¢List=()ï½£
</markup-R>
 formatting. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢a2586c22cca1bcdcd850ac1b2e36872d180da02cï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate 
<markup-T>
  contents: ï½¢Terminalï½£
  delta: ï½¢List=()ï½£
</markup-T>
 formatting. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢babdd965acdd3f8cfb69b998d32fe562779eb942ï½£
</para>

<para>
  contents: ï½¢A paragraph to illustrate several G<G undefined type>, Q<Q undefined
type>, W<W undefined type>, Y<Y undefined type> formatting; warnings are expected.
ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢b67b14fe45f6f51f37c52290c5c3d43cbd1ce67fï½£
</para>

<para>
  contents: ï½¢Various entities are possible such as 
<markup-E>
  contents: ï½¢Â«ï½£
  delta: ï½¢List=()ï½£
</markup-E>
 or the same thing using unicode 
<markup-E>
  contents: ï½¢Â«ï½£
  delta: ï½¢List=()ï½£
</markup-E>
. Entities can be double unicodes, such as 
<markup-E>
  contents: ï½¢ðŸ‡ºðŸ‡¦ï½£
  delta: ï½¢List=()ï½£
</markup-E>
, which is the Ukrainian flag. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢56dbb4ea13d990cca809e3d2c845f93d4651c8feï½£
</para>

<para>
  contents: ï½¢In case you have forgotten, here is something aliased at the start:

<markup-A>
  contents: ï½¢Do not consider this a disquisition of possible combinations.ï½£
  delta: ï½¢List=()ï½£
  error: ï½¢Falseï½£
  error-text: ï½¢ï½£
</markup-A>
 ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢1f5206436294ebf5dd8ec3e06904fb575b697a0eï½£
</para>

<para>
  contents: ï½¢This is an example of an Alias where 
<markup-V>
  contents: ï½¢A<DECLARATION>ï½£
  delta: ï½¢List=()ï½£
</markup-V>
 was replaced by the contents of the 
<markup-V>
  contents: ï½¢=aliasï½£
  delta: ï½¢List=()ï½£
</markup-V>
 directive. Aliases are scoped, see below, but cannot be specified before being
used in the document. Here is 
<markup-A>
  contents: ï½¢an undeclaredï½£
  delta: ï½¢List=()ï½£
  error: ï½¢Trueï½£
  error-text: ï½¢an undeclaredï½£
</markup-A>
 forward reference, which was written as 
<markup-V>
  contents: ï½¢A<an undeclared|XXX>ï½£
  delta: ï½¢List=()ï½£
</markup-V>
. The use of an undeclared alias causes a warning. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢09f0f9f2d2590070e7ca1d8bf15e25d4aff3a586ï½£
</para>

<para>
  contents: ï½¢We can also make an inline 
<markup-D>
  contents: ï½¢definitionï½£
  delta: ï½¢List=()ï½£
</markup-D>
. This whole paragraph will be referenced later. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢d4c95f5bf77a5bc7722717c12b583045bc1bb14bï½£
</para>

<para>
  contents: ï½¢A developer note 
<markup-Î”>
  contents: ï½¢v1.2.3 ^.. v2.0.0ï½£
  delta: ï½¢List=()ï½£
  meta: ï½¢can be attachedï½£
</markup-Î”>
 to text. A renderer may show the text or only show it for contexts compliant
with the version. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢cc5b860c4fefe695a3ee65c2789cc6fd91a5af80ï½£
</para>

<para>
  contents: ï½¢But a note without meta  is ignored and a warning generated. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢23c7aa2463f4fe5818327ae13d30299305d93f3eï½£
</para>

<para>
  contents: ï½¢When we want a formula 
<markup-F>
  contents: ï½¢\sum \frac{1}{n^{2}} = \frac{\pi^{2}}{6}ï½£
  delta: ï½¢List=()ï½£
  formula: ï½¢\sum \frac{1}{n^{2}} = \frac{\pi^{2}}{6}ï½£
</markup-F>
 use 
<markup-V>
  contents: ï½¢F<>ï½£
  delta: ï½¢List=()ï½£
</markup-V>
 markup. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢74b2a06ca6fc490f75359e33ce194ce7ba584f9cï½£
</para>

<para>
  contents: ï½¢Links can be made internally 
<markup-L>
  delta: ï½¢List=()ï½£
  extra: ï½¢ï½£
  link-label: ï½¢say to the first headingï½£
  target: ï½¢This_is_a_first_headingï½£
  type: ï½¢internalï½£
</markup-L>
 or externally 
<markup-L>
  delta: ï½¢List=()ï½£
  extra: ï½¢ï½£
  link-label: ï½¢say to the raku documentation siteï½£
  target: ï½¢https://docs.raku.orgï½£
  type: ï½¢externalï½£
</markup-L>
. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢3cb6b25d0b28201a4126f3c219542d2e272ffaceï½£
</para>

<para>
  contents: ï½¢A renderer should provide the opportunity to customise text using 
<markup-V>
  contents: ï½¢M<...|..,..;...>ï½£
  delta: ï½¢List=()ï½£
</markup-V>
 markup. The renderer 
<markup-M>
  contents: ï½¢should not recognise this functionalityï½£
  target: ï½¢index-entry-should_not_recognise_this_functionalityï½£
</markup-M>
 and issue a warning. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢dd06749c0cd9f633f741848aa37305adbf0a61f2ï½£
</para>

<para>
  contents: ï½¢A note 
<markup-N>
  delta: ï½¢List=()ï½£
  fnNumber: ï½¢(PCell): ï½¢fn_num_N<such_as_this_one> UNAVAILABLEï½£ï½£
  fnTarget: ï½¢fn_target_N<such_as_this_one>ï½£
  retTarget: ï½¢N<such_as_this_one>ï½£
</markup-N>
 will not itself be rendered inline, but the text will be rendered in a footnote
or popup. A marker or number will be rendered to point to the text. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢ce06e083f8f925b5456d394a695afdab50c4ec4bï½£
</para>

<para>
  contents: ï½¢Suppose we want to place the definition 
<markup-P>
  contents: ï½¢Im-a-doppelgangerï½£
  defn-expansion: ï½¢(PCell): 
  <para>
    contents: ï½¢We can also make an inline 
  <markup-D>
    contents: ï½¢definitionï½£
    delta: ï½¢List=()ï½£
  </markup-D>
  . This whole paragraph will be referenced later. ï½£
    delta: ï½¢List=()ï½£
    target: ï½¢d4c95f5bf77a5bc7722717c12b583045bc1bb14bï½£
  </para>
  ï½£
  defn-target: ï½¢(PCell): d4c95f5bf77a5bc7722717c12b583045bc1bb14bï½£
  delta: ï½¢List=()ï½£
  html: ï½¢Falseï½£
  keep-format: ï½¢Falseï½£
  schema: ï½¢defnï½£
</markup-P>
 here. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢eb4da1556cd447a7574f90369b0bf966805b5adfï½£
</para>

<para>
  contents: ï½¢Normally extra spaces are removed with paragraphs, but sometimes 
<markup-S>
  contents: ï½¢we truly dot dot dot   dash dash dash       want themï½£
  delta: ï½¢List=()ï½£
</markup-S>
. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢a5f3882fad84accd190bead668e8e2893f3b0191ï½£
</para>

<para>
  contents: ï½¢Good text will contain 
<markup-X>
  contents: ï½¢elements to be placedï½£
  delta: ï½¢List=()ï½£
  meta: ï½¢Array=[
  	Array=[]
  ]ï½£
  place: ï½¢This is third level headingï½£
  target: ï½¢index-entry-elements_to_be_placedï½£
</markup-X>
 in an index. The index has already been placed at the start of the document,
although content is generated here. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢e7e10bd4a6c71ca9fabadb495745b49379c38b6aï½£
</para>

<numhead>
  caption: ï½¢This is a numbered heading, level 1ï½£
  contents: ï½¢This is a numbered heading, level 1ï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢1ï½£
  numeration: ï½¢1.ï½£
  target: ï½¢This_is_a_numbered_heading,_level_1ï½£
  toc: ï½¢Trueï½£
</numhead>

<para>
  contents: ï½¢text ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢70ad9d467776969c23717c7f56a00f439170d167ï½£
</para>

<numhead>
  caption: ï½¢This is a second level headingï½£
  contents: ï½¢This is a second level headingï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢2ï½£
  numeration: ï½¢1.1.ï½£
  target: ï½¢This_is_a_second_level_heading_0ï½£
  toc: ï½¢Trueï½£
</numhead>

<para>
  contents: ï½¢text ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢70ad9d467776969c23717c7f56a00f439170d167ï½£
</para>

<numhead>
  caption: ï½¢A third levelï½£
  contents: ï½¢A third levelï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢3ï½£
  numeration: ï½¢1.1.1.ï½£
  target: ï½¢A_third_levelï½£
  toc: ï½¢Trueï½£
</numhead>

<para>
  contents: ï½¢text ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢70ad9d467776969c23717c7f56a00f439170d167ï½£
</para>

<numhead>
  caption: ï½¢Another third levelï½£
  contents: ï½¢Another third levelï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢3ï½£
  numeration: ï½¢1.1.2.ï½£
  target: ï½¢Another_third_levelï½£
  toc: ï½¢Trueï½£
</numhead>

<para>
  contents: ï½¢text ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢70ad9d467776969c23717c7f56a00f439170d167ï½£
</para>

<numhead>
  caption: ï½¢Back to secondï½£
  contents: ï½¢Back to secondï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢2ï½£
  numeration: ï½¢1.2.ï½£
  target: ï½¢Back_to_secondï½£
  toc: ï½¢Trueï½£
</numhead>

<para>
  contents: ï½¢text ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢70ad9d467776969c23717c7f56a00f439170d167ï½£
</para>

<numhead>
  caption: ï½¢A third levelï½£
  contents: ï½¢A third levelï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢3ï½£
  numeration: ï½¢1.2.1.ï½£
  target: ï½¢A_third_level_0ï½£
  toc: ï½¢Trueï½£
</numhead>

<para>
  contents: ï½¢Although this heading has the same text in the heading, the Table
of Contents should provide a unique target for it (this may not be possible
in some formats such as MarkDown) ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢dcb2dabbd66421c17fdf091cfa32aea8bd834d1bï½£
</para>

<numhead>
  caption: ï½¢Another third levelï½£
  contents: ï½¢Another third levelï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢3ï½£
  numeration: ï½¢1.2.2.ï½£
  target: ï½¢Another_third_level_0ï½£
  toc: ï½¢Trueï½£
</numhead>

<para>
  contents: ï½¢text ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢70ad9d467776969c23717c7f56a00f439170d167ï½£
</para>

<numitem-list>
  numitem-list: ï½¢Array=[
  	(PStr): 
  	<numitem>
  	  contents: ï½¢The start of a numbered item listï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢1ï½£
  	  numeration: ï½¢1.ï½£
  	</numitem>
  ,
  	(PStr): 
  	<numitem>
  	  contents: ï½¢Next itemï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢1ï½£
  	  numeration: ï½¢2.ï½£
  	</numitem>
  ,
  	(PStr): 
  	<numitem>
  	  contents: ï½¢now next levelï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢2ï½£
  	  numeration: ï½¢2.1.ï½£
  	</numitem>
  ,
  	(PStr): 
  	<numitem>
  	  contents: ï½¢another at twoï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢2ï½£
  	  numeration: ï½¢2.2.ï½£
  	</numitem>
  ,
  	(PStr): 
  	<numitem>
  	  contents: ï½¢a third levelï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢3ï½£
  	  numeration: ï½¢2.2.1.ï½£
  	</numitem>
  ,
  	(PStr): 
  	<numitem>
  	  contents: ï½¢reset to level oneï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢1ï½£
  	  numeration: ï½¢3.ï½£
  	</numitem>
  ,
  	(PStr): 
  	<numitem>
  	  contents: ï½¢jump levelsï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢3ï½£
  	  numeration: ï½¢3.0.1.ï½£
  	</numitem>
  
  ]ï½£
</numitem-list>

<item-list>
  item-list: ï½¢Array=[
  	(PStr): 
  	<item>
  	  contents: ï½¢an unnumbered itemï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢1ï½£
  	</item>
  
  ]ï½£
</item-list>

<numitem-list>
  numitem-list: ï½¢Array=[
  	(PStr): 
  	<numitem>
  	  contents: ï½¢but we can resume after a breakï½£
  	  continued: ï½¢Trueï½£
  	  delta: ï½¢List=()ï½£
  	  level: ï½¢2ï½£
  	  numeration: ï½¢3.1.ï½£
  	</numitem>
  
  ]ï½£
</numitem-list>

<defn-list>
  defn-list: ï½¢Array=[
  	(PStr): 
  	<defn>
  	  contents: ï½¢can be placed in lists ï½£
  	  delta: ï½¢List=()ï½£
  	  target: ï½¢defn_Definitionsï½£
  	  term: ï½¢Definitionsï½£
  	</defn>
  ,
  	(PStr): 
  	<defn>
  	  contents: ï½¢when not blue ï½£
  	  delta: ï½¢List=()ï½£
  	  target: ï½¢defn_Happyï½£
  	  term: ï½¢Happyï½£
  	</defn>
  ,
  	(PStr): 
  	<defn>
  	  contents: ï½¢when not happy ï½£
  	  delta: ï½¢List=()ï½£
  	  target: ï½¢defn_Blueï½£
  	  term: ï½¢Blueï½£
  	</defn>
  ,
  	(PStr): 
  	<defn>
  	  contents: ï½¢
  	<para>
  	  contents: ï½¢Just 
  	<markup-B>
  	  contents: ï½¢shoutï½£
  	  delta: ï½¢List=()ï½£
  	</markup-B>
  	 why don't you? ï½£
  	  delta: ï½¢List=()ï½£
  	  target: ï½¢d15bc7e91b06aaf9be814e58edff99e539e2245cï½£
  	</para>
  	ï½£
  	  delta: ï½¢List=()ï½£
  	  target: ï½¢defn_Being_assertiveï½£
  	  term: ï½¢Being assertiveï½£
  	</defn>
  
  ]ï½£
</defn-list>

<para>
  contents: ï½¢This is an ordinary paragraph ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢247bfbf7af283c4b6ba3d4760a4265c789cbaca5ï½£
</para>

<numdefn-list>
  numdefn-list: ï½¢Array=[
  	(PStr): 
  	<numdefn>
  	  contents: ï½¢do not make trouble ï½£
  	  delta: ï½¢List=()ï½£
  	  numeration: ï½¢1.ï½£
  	  target: ï½¢defn_Lemma_1ï½£
  	  term: ï½¢Lemma 1ï½£
  	</numdefn>
  ,
  	(PStr): 
  	<numdefn>
  	  contents: ï½¢do not shout at people ï½£
  	  delta: ï½¢List=()ï½£
  	  numeration: ï½¢2.ï½£
  	  target: ï½¢defn_Lemma_2ï½£
  	  term: ï½¢Lemma 2ï½£
  	</numdefn>
  ,
  	(PStr): 
  	<numdefn>
  	  contents: ï½¢just phone the SWAT team ï½£
  	  delta: ï½¢List=()ï½£
  	  numeration: ï½¢3.ï½£
  	  target: ï½¢defn_Lemma_3ï½£
  	  term: ï½¢Lemma 3ï½£
  	</numdefn>
  
  ]ï½£
</numdefn-list>

<para>
  contents: ï½¢An ordinary paragraph creates the definition list. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢a3fd33b6d94b490c4752017a89487b54784e6defï½£
</para>

<numdefn-list>
  numdefn-list: ï½¢Array=[
  	(PStr): 
  	<numdefn>
  	  contents: ï½¢Claim you are the victim here ï½£
  	  continued: ï½¢Trueï½£
  	  delta: ï½¢List=()ï½£
  	  numeration: ï½¢4.ï½£
  	  target: ï½¢defn_Lemma_4ï½£
  	  term: ï½¢Lemma 4ï½£
  	</numdefn>
  
  ]ï½£
</numdefn-list>

<head>
  caption: ï½¢Blocks that are processed differentlyï½£
  contents: ï½¢Blocks that are processed differentlyï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢1ï½£
  numeration: ï½¢ï½£
  target: ï½¢Blocks_that_are_processed_differentlyï½£
  toc: ï½¢Trueï½£
</head>

<code>
  contents: ï½¢my $x = 2;
# a brilliant program!ï½£
  delta: ï½¢List=()ï½£
</code>

<code>
  allow: ï½¢List=(
  	"B",
  	"K"
  )ï½£
  contents: ï½¢my $x = 3;
# a renderer 
<markup-B>
  contents: ï½¢shouldï½£
  delta: ï½¢List=()ï½£
</markup-B>
 observe the basis markup
# and the 
<markup-K>
  contents: ï½¢markupï½£
  delta: ï½¢List=()ï½£
</markup-K>
 but render R<markup> verbatimï½£
  delta: ï½¢List=()ï½£
</code>

<implicit-code>
  contents: ï½¢
<para>
  contents: ï½¢# indenting causes an implicit code block my $raku = 'fantastic'; ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢b2f69bed1d6198372eb1b7db810d679a8590e5d6ï½£
</para>ï½£
  delta: ï½¢List=()ï½£
</implicit-code>

<input>
  contents: ï½¢This is a text with 
<markup-B>
  contents: ï½¢basisï½£
  delta: ï½¢List=()ï½£
</markup-B>
 markup that conserves
all spacing      when trying    to get column
just using       white spaces   naively
better           to             use tablesï½£
  delta: ï½¢List=()ï½£
</input>

<output>
  contents: ï½¢This is almost the same as input
but may have a different stylingï½£
  delta: ï½¢List=()ï½£
</output>

<nested>
  contents: ï½¢
<para>
  contents: ï½¢Occasionally some text that is inset from the margin is required.
So enclose it in a nested block. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢6e9b6e59515b8743ca9ecc09b39aedd2e72145a8ï½£
</para>ï½£
  delta: ï½¢List=()ï½£
</nested>

<para>
  contents: ï½¢The following semantic block was included at the beginning in sour-
ce, but it is now included here. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢17965ac10461dfed4208425b8d6df63a2ccd64b2ï½£
</para>

<place>
  caption: ï½¢List=(
  	"Unrelenting",
  	"hype"
  )ï½£
  contents: ï½¢(PCell): ï½¢semantic-schema_AUTHORS UNAVAILABLEï½£ï½£
  delta: ï½¢List=()ï½£
  headlevel: ï½¢2ï½£
  html: ï½¢Falseï½£
  keep-format: ï½¢Trueï½£
  schema: ï½¢semanticï½£
</place>

<formula>
  alt: ï½¢Formula cannot be renderedï½£
  caption: ï½¢List=(
  	"Fabulous",
  	"identity"
  )ï½£
  delta: ï½¢List=()ï½£
  formula: ï½¢e^{i\pi}+1=0ï½£
  level: ï½¢1ï½£
  numeration: ï½¢ï½£
  target: ï½¢Formula_cannot_be_renderedï½£
</formula>

<unknown>
  block-name: ï½¢MyBlockï½£
  contents: ï½¢=begin MyBlock :caption<A customised block> :headlevel(2)
  Actually it fails because no customisation has been made.
  It
  should
  be
  rendered without spaces      being chewed up.
  =end MyBlock
  
  ï½£
</unknown>

<para>
  caption: ï½¢List=(
  	"This",
  	"is",
  	"an",
  	"extraordinary",
  	"paragraph"
  )ï½£
  contents: ï½¢
<para>
  contents: ï½¢Some silly text which will have its own 
<markup-B>
  contents: ï½¢extraordinaryï½£
  delta: ï½¢List=()ï½£
</markup-B>
 ToC entry ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢13793e55b9c8e28f8ade1a00f6cf152453a8c829ï½£
</para>ï½£
  delta: ï½¢List=()ï½£
  toc: ï½¢Trueï½£
</para>

<para>
  contents: ï½¢You are reminded that: 
<markup-A>
  contents: ï½¢
<markup-A>
  contents: ï½¢Do not consider this a disquisition of possible combinations.ï½£
  delta: ï½¢List=()ï½£
  error: ï½¢Falseï½£
  error-text: ï½¢ï½£
</markup-A>
ï½£
  delta: ï½¢List=()ï½£
  error: ï½¢Falseï½£
  error-text: ï½¢ï½£
</markup-A>
 ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢da31ae90828c7ec51ae389f2c66701c6766385f7ï½£
</para>

<head>
  caption: ï½¢Some tablesï½£
  contents: ï½¢Some tablesï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢1ï½£
  numeration: ï½¢ï½£
  target: ï½¢Some_tablesï½£
  toc: ï½¢Trueï½£
</head>

<table>
  caption: ï½¢List=(
  	"A",
  	"visual",
  	"table"
  )ï½£
  delta: ï½¢List=()ï½£
  grid: ï½¢Array=[]ï½£
  header-row: ï½¢0ï½£
  headers: ï½¢Array=[
  	Array=[
  			(PStr): Animal,
  			(PStr): Legs,
  			(PStr):    Eats
  	]
  ]ï½£
  headlevel: ï½¢2ï½£
  id: ï½¢UNINITIALISEDï½£
  procedural: ï½¢Falseï½£
  rows: ï½¢Array=[
  	Array=[
  			(PStr): Zebra ,
  			(PStr):   4 ,
  			(PStr): Cookies
  	],
  	Array=[
  			(PStr): Human ,
  			(PStr):   2 ,
  			(PStr):   Pizza
  	],
  	Array=[
  			(PStr): Shark ,
  			(PStr):   0 ,
  			(PStr):    Fish
  	]
  ]ï½£
</table>

<table>
  caption: ï½¢List=(
  	"A",
  	"visual",
  	"table",
  	"with",
  	"a",
  	"stupendously",
  	"long",
  	"caption"
  )ï½£
  delta: ï½¢List=()ï½£
  grid: ï½¢Array=[]ï½£
  header-row: ï½¢0ï½£
  headers: ï½¢Array=[
  	Array=[
  			(PStr): Animal,
  			(PStr): Legs,
  			(PStr):    Eats
  	]
  ]ï½£
  headlevel: ï½¢2ï½£
  id: ï½¢UNINITIALISEDï½£
  procedural: ï½¢Falseï½£
  rows: ï½¢Array=[
  	Array=[
  			(PStr): Zebra ,
  			(PStr):   4 ,
  			(PStr): Cookies
  	],
  	Array=[
  			(PStr): Human ,
  			(PStr):   2 ,
  			(PStr):   Pizza
  	],
  	Array=[
  			(PStr): Shark ,
  			(PStr):   0 ,
  			(PStr):    Fish
  	]
  ]ï½£
</table>

<table>
  caption: ï½¢List=(
  	"A",
  	"procedural",
  	"table"
  )ï½£
  delta: ï½¢List=()ï½£
  grid: ï½¢Array=[
  	Array=[
  			Hash={
  						:data((PStr): Date),
  						:header,
  						:row-span(2),
  						:span(Array=[
  							1,
  							2
  						])
  			},
  			Hash={
  						:column-span(3),
  						:data((PStr): Samples),
  						:header,
  						:span(Array=[
  							3,
  							1
  						])
  			},
  			Hash={
  						:no-cell
  			},
  			Hash={
  						:no-cell
  			},
  			Hash={
  						:data((PStr): Mean),
  						:header,
  						:row-span(2),
  						:span(Array=[
  							1,
  							2
  						])
  			}
  	],
  	Array=[
  			Hash={
  						:no-cell
  			},
  			Hash={
  						:data((PStr): 
  						<para>
  						  contents: ï½¢
  						<markup-I>
  						  contents: ï½¢Sample 1ï½£
  						  delta: ï½¢List=()ï½£
  						</markup-I>
  						 ï½£
  						  delta: ï½¢List=()ï½£
  						  target: ï½¢2c76dfc8b52b5f444d3ea1a2bf5ba95eb6500c48ï½£
  						</para>),
  						:header
  			},
  			Hash={
  						:data((PStr): 
  						<para>
  						  contents: ï½¢
  						<markup-I>
  						  contents: ï½¢Sample 2ï½£
  						  delta: ï½¢List=()ï½£
  						</markup-I>
  						 ï½£
  						  delta: ï½¢List=()ï½£
  						  target: ï½¢74f943e8af06c1a2868519d421379ed8e9e63692ï½£
  						</para>),
  						:header
  			},
  			Hash={
  						:data((PStr): 
  						<para>
  						  contents: ï½¢
  						<markup-I>
  						  contents: ï½¢Sample 3ï½£
  						  delta: ï½¢List=()ï½£
  						</markup-I>
  						 ï½£
  						  delta: ï½¢List=()ï½£
  						  target: ï½¢ea5911979104fa109c84f890f81ce5fbbf33ac25ï½£
  						</para>),
  						:header
  			},
  			Hash={
  						:no-cell
  			}
  	],
  	Array=[
  			Hash={
  						:data((PStr): 2023-03-08)
  			},
  			Hash={
  						:data((PStr): 0.4)
  			},
  			Hash={
  						:data((PStr): 0.1)
  			},
  			Hash={
  						:data((PStr): 0.3)
  			},
  			Hash={
  						:data((PStr): 0.26667)
  			}
  	],
  	Array=[
  			Hash={
  						:data((PStr): 2023-04-14)
  			},
  			Hash={
  						:data((PStr): 0.8)
  			},
  			Hash={
  						:data((PStr): 0.6)
  			},
  			Hash={
  						:data((PStr): 0.5)
  			},
  			Hash={
  						:data((PStr): 0.63333)
  			}
  	],
  	Array=[
  			Hash={
  						:data((PStr): 2023-06-23)
  			},
  			Hash={
  						:data((PStr): 0.2)
  			},
  			Hash={
  						:data((PStr): 0.9)
  			},
  			Hash={
  						:data((PStr): 0.0)
  			},
  			Hash={
  						:data((PStr): 0.36667)
  			}
  	],
  	Array=[
  			Hash={
  						:data((PStr): Mean:),
  						:label
  			},
  			Hash={
  						:data((PStr): 0.46667)
  			},
  			Hash={
  						:data((PStr): 0.53333)
  			},
  			Hash={
  						:data((PStr): 0.26667)
  			},
  			Hash={
  						:data((PStr): 0.42222)
  			}
  	]
  ]ï½£
  headers: ï½¢Array=[]ï½£
  headlevel: ï½¢2ï½£
  id: ï½¢UNINITIALISEDï½£
  procedural: ï½¢Trueï½£
  rows: ï½¢Array=[]ï½£
</table>

<head>
  caption: ï½¢Adding index entries to your textï½£
  contents: ï½¢Adding index entries to your textï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢1ï½£
  numeration: ï½¢ï½£
  target: ï½¢Adding_index_entries_to_your_textï½£
  toc: ï½¢Trueï½£
</head>

<para>
  contents: ï½¢An 
<markup-X>
  contents: ï½¢index entryï½£
  delta: ï½¢List=()ï½£
  meta: ï½¢Array=[
  	Array=[
  			"index",
  			"entry"
  	]
  ]ï½£
  place: ï½¢Adding index entries to your textï½£
  target: ï½¢index-entry-index_entryï½£
</markup-X>
 is an inline 
<markup-X>
  contents: ï½¢formatting codeï½£
  delta: ï½¢List=()ï½£
  meta: ï½¢Array=[
  	Array=[
  			"formatting code"
  	],
  	Array=[
  			"inline formatting"
  	]
  ]ï½£
  place: ï½¢Adding index entries to your textï½£
  target: ï½¢index-entry-formatting_codeï½£
</markup-X>
 that is rendered normally (i.e. with no special identifying styling) within
the text, but which is also added to the 
<markup-X>
  contents: ï½¢indexï½£
  delta: ï½¢List=()ï½£
  meta: ï½¢Array=[
  	Array=[]
  ]ï½£
  place: ï½¢Adding index entries to your textï½£
  target: ï½¢index-entry-indexï½£
</markup-X>
. 
<markup-X>
  contents: ï½¢Index entriesï½£
  delta: ï½¢List=()ï½£
  meta: ï½¢Array=[
  	Array=[
  			"index",
  			"entry"
  	]
  ]ï½£
  place: ï½¢Adding index entries to your textï½£
  target: ï½¢index-entry-Index_entriesï½£
</markup-X>
 may be specified with 
<markup-X>
  contents: ï½¢subentriesï½£
  delta: ï½¢List=()ï½£
  meta: ï½¢Array=[
  	Array=[
  			"index",
  			"subentry"
  	]
  ]ï½£
  place: ï½¢Adding index entries to your textï½£
  target: ï½¢index-entry-subentriesï½£
</markup-X>
, including 
<markup-X>
  contents: ï½¢multilevel subentriesï½£
  delta: ï½¢List=()ï½£
  meta: ï½¢Array=[
  	Array=[
  			"index",
  			"subentry",
  			"multilevel"
  	]
  ]ï½£
  place: ï½¢Adding index entries to your textï½£
  target: ï½¢index-entry-multilevel_subentriesï½£
</markup-X>
, though a renderer is not required to represent anything more than the 
<markup-X>
  contents: ï½¢first levelï½£
  delta: ï½¢List=()ï½£
  meta: ï½¢Array=[
  	Array=[
  			"index",
  			"subentry",
  			"rendering"
  	]
  ]ï½£
  place: ï½¢Adding index entries to your textï½£
  target: ï½¢index-entry-first_levelï½£
</markup-X>
. A single index entry can specify 
<markup-X>
  contents: ï½¢two or more separate entries in the indexï½£
  delta: ï½¢List=()ï½£
  meta: ï½¢Array=[
  	Array=[
  			"index"
  	],
  	Array=[
  			"index",
  			"multiple entries"
  	],
  	Array=[
  			"index",
  			"entry",
  			"nested"
  	]
  ]ï½£
  place: ï½¢Adding index entries to your textï½£
  target: ï½¢index-entry-two_or_more_separate_entries_in_the_indexï½£
</markup-X>
, all of which will refer back to the same point in the text. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢ec4701c0bc3cdd6766d408682786ec9dbc8cfcb5ï½£
</para>

<head>
  caption: ï½¢Scoping examplesï½£
  contents: ï½¢Scoping examplesï½£
  delta: ï½¢List=()ï½£
  id: ï½¢ï½£
  level: ï½¢1ï½£
  numeration: ï½¢ï½£
  target: ï½¢Scoping_examplesï½£
  toc: ï½¢Trueï½£
</head>

<para>
  contents: ï½¢Configuration and aliases are scoped. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢34232ffd55c5cac6f98d36702e827373b6019325ï½£
</para>

<para>
  contents: ï½¢Without configuration 
<markup-C>
  contents: ï½¢embedded B<markup> is renderedï½£
  delta: ï½¢List=()ï½£
</markup-C>
 verbatim. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢95a13662193085f545b06d3b81a624835ab76775ï½£
</para>

<section>
  contents: ï½¢
<para>
  contents: ï½¢With configuration 
<markup-C>
  allow: ï½¢Bï½£
  contents: ï½¢embedded 
<markup-B>
  contents: ï½¢basisï½£
  delta: ï½¢List=()ï½£
</markup-B>
 markupï½£
  delta: ï½¢List=()ï½£
</markup-C>
 is rendered. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢3484bb922262f4cdd3bb1607af492b08123bff95ï½£
</para>

<para>
  contents: ï½¢How short the season when 
<markup-A>
  contents: ï½¢roses are redï½£
  delta: ï½¢List=()ï½£
  error: ï½¢Falseï½£
  error-text: ï½¢ï½£
</markup-A>
. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢25012a84eb3ac3eb5d95f4d83f4284238b8ce1f9ï½£
</para>ï½£
  delta: ï½¢List=()ï½£
</section>

<para>
  contents: ï½¢But configuration directives 
<markup-C>
  contents: ï½¢only B<apply> insideï½£
  delta: ï½¢List=()ï½£
</markup-C>
 a block scope. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢0c5c341d4a95069809f1c778337a45574bdb311cï½£
</para>

<para>
  contents: ï½¢Did I mention before that: 
<markup-A>
  contents: ï½¢
<markup-A>
  contents: ï½¢
<markup-A>
  contents: ï½¢Do not consider this a disquisition of possible combinations.ï½£
  delta: ï½¢List=()ï½£
  error: ï½¢Falseï½£
  error-text: ï½¢ï½£
</markup-A>
ï½£
  delta: ï½¢List=()ï½£
  error: ï½¢Falseï½£
  error-text: ï½¢ï½£
</markup-A>
ï½£
  delta: ï½¢List=()ï½£
  error: ï½¢Falseï½£
  error-text: ï½¢ï½£
</markup-A>
 ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢8306c3cdcd721599b871f5489a13d335c3ed9d74ï½£
</para>

<para>
  contents: ï½¢Text finishes. ï½£
  delta: ï½¢List=()ï½£
  target: ï½¢ca65442fce01872480b04eda647ca9fa5e8995e4ï½£
</para>ï½£
  one-option: ï½¢firstï½£
</rakudoc>
ï½£
  footnotes: ï½¢
  <footnotes>
    footnotes: ï½¢Array=[
    	Hash={
    			:contents((PStr): such as this one),
    			:fnNumber(1),
    			:fnTarget("fn_target_N<such_as_this_one>"),
    			:retTarget("N<such_as_this_one>")
    	}
    ]ï½£
  </footnotes>
  ï½£
  front-matter: ï½¢prefaceï½£
  modified: ï½¢2024-06-13T21:58:57Zï½£
  name: ï½¢rakudociem-ipsum.rakudoc.txtï½£
  rendered-index: ï½¢
  <index>
    caption: ï½¢Indexï½£
    index-list: ï½¢Array=[
    	"\n<index-item>\n  entry: ï½¢elements to be placedï½£\n  entry-data: ï½¢Hash=\{\n
 \t:refs(Array=[\n  \t\tHash=\{\n  \t\t\t\t:place(\"This is third level heading\"),\n
 \t\t\t\t:target(\"index-entry-elements_to_be_placed\")\n  \t\t}\n  \t]),\n
 \t:sub-index(Hash=\{})\n  }ï½£\n</index-item>\n",
    	"\n<index-item>\n  entry: ï½¢formatting codeï½£\n  entry-data: ï½¢Hash=\{\n  \t:-
refs(Array=[\n  \t\tHash=\{\n  \t\t\t\t:place(\"Adding index entries to your
text\"),\n  \t\t\t\t:target(\"index-entry-formatting_code\")\n  \t\t}\n  \t]),\n
 \t:sub-index(Hash=\{})\n  }ï½£\n</index-item>\n",
    	"\n<index-item>\n  entry: ï½¢indexï½£\n  entry-data: ï½¢Hash=\{\n  \t:refs(Array=[\n
 \t\tHash=\{\n  \t\t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t\t:target(\"index-entry-index_entry\")\n
 \t\t},\n  \t\tHash=\{\n  \t\t\t\t:place(\"Adding index entries to your text\"),\n
 \t\t\t\t:target(\"index-entry-index\")\n  \t\t},\n  \t\tHash=\{\n  \t\t\t\t:place(\"Adding
index entries to your text\"),\n  \t\t\t\t:target(\"index-entry-Index_entries\")\n
 \t\t},\n  \t\tHash=\{\n  \t\t\t\t:place(\"Adding index entries to your text\"),\n
 \t\t\t\t:target(\"index-entry-subentries\")\n  \t\t},\n  \t\tHash=\{\n  \t\t\t\t:place(\"Adding
index entries to your text\"),\n  \t\t\t\t:target(\"index-entry-multilevel_subentries\")\n
 \t\t},\n  \t\tHash=\{\n  \t\t\t\t:place(\"Adding index entries to your text\"),\n
 \t\t\t\t:target(\"index-entry-first_level\")\n  \t\t},\n  \t\tHash=\{\n  \t\t\t\t:place(\"Adding
index entries to your text\"),\n  \t\t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n
 \t\t},\n  \t\tHash=\{\n  \t\t\t\t:place(\"Adding index entries to your text\"),\n
 \t\t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n
 \t\t},\n  \t\tHash=\{\n  \t\t\t\t:place(\"Adding index entries to your text\"),\n
 \t\t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n
 \t\t}\n  \t]),\n  \t:sub-index(Hash=\{\n  \t\t:entry(Hash=\{\n  \t\t\t:refs(Array=[\n
 \t\t\t\tHash=\{\n  \t\t\t\t\t\t:place(\"Adding index entries to your text\"),\n
 \t\t\t\t\t\t:target(\"index-entry-index_entry\")\n  \t\t\t\t},\n  \t\t\t\tHash=\{\n
 \t\t\t\t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t\t\t\t:target(\"index-entry-Index_entries\")\n
 \t\t\t\t},\n  \t\t\t\tHash=\{\n  \t\t\t\t\t\t:place(\"Adding index entries
to your text\"),\n  \t\t\t\t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n
 \t\t\t\t}\n  \t\t\t]),\n  \t\t\t:sub-index(Hash=\{\n  \t\t\t\t:nested(Hash=\{\n
 \t\t\t\t\t:refs(Array=[\n  \t\t\t\t\t\tHash=\{\n  \t\t\t\t\t\t\t\t:place(\"Adding
index entries to your text\"),\n  \t\t\t\t\t\t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n
 \t\t\t\t\t\t}\n  \t\t\t\t\t]),\n  \t\t\t\t\t:sub-index(Hash=\{})\n  \t\t\t\t})\n
 \t\t\t})\n  \t\t}),\n  \t\t:multiple entries(Hash=\{\n  \t\t\t:refs(Array=[\n
 \t\t\t\tHash=\{\n  \t\t\t\t\t\t:place(\"Adding index entries to your text\"),\n
 \t\t\t\t\t\t:target(\"index-entry-two_or_more_separate_entries_in_the_index\")\n
 \t\t\t\t}\n  \t\t\t]),\n  \t\t\t:sub-index(Hash=\{})\n  \t\t}),\n  \t\t:subentry(Hash=\{\n
 \t\t\t:refs(Array=[\n  \t\t\t\tHash=\{\n  \t\t\t\t\t\t:place(\"Adding index
entries to your text\"),\n  \t\t\t\t\t\t:target(\"index-entry-subentries\")\n
 \t\t\t\t},\n  \t\t\t\tHash=\{\n  \t\t\t\t\t\t:place(\"Adding index entries
to your text\"),\n  \t\t\t\t\t\t:target(\"index-entry-multilevel_subentries\")\n
 \t\t\t\t},\n  \t\t\t\tHash=\{\n  \t\t\t\t\t\t:place(\"Adding index entries
to your text\"),\n  \t\t\t\t\t\t:target(\"index-entry-first_level\")\n  \t\t\t\t}\n
 \t\t\t]),\n  \t\t\t:sub-index(Hash=\{\n  \t\t\t\t:multilevel(Hash=\{\n  \t\t\t\t\t:refs(Array=[\n
 \t\t\t\t\t\tHash=\{\n  \t\t\t\t\t\t\t\t:place(\"Adding index entries to your
text\"),\n  \t\t\t\t\t\t\t\t:target(\"index-entry-multilevel_subentries\")\n
 \t\t\t\t\t\t}\n  \t\t\t\t\t]),\n  \t\t\t\t\t:sub-index(Hash=\{})\n  \t\t\t\t}),\n
 \t\t\t\t:rendering(Hash=\{\n  \t\t\t\t\t:refs(Array=[\n  \t\t\t\t\t\tHash=\{\n
 \t\t\t\t\t\t\t\t:place(\"Adding index entries to your text\"),\n  \t\t\t\t\t\t\t\t:target(\"index-entry-first_level\")\n
 \t\t\t\t\t\t}\n  \t\t\t\t\t]),\n  \t\t\t\t\t:sub-index(Hash=\{})\n  \t\t\t\t})\n
 \t\t\t})\n  \t\t})\n  \t})\n  }ï½£\n</index-item>\n",
    	"\n<index-item>\n  entry: ï½¢inline formattingï½£\n  entry-data: ï½¢Hash=\{\n
 \t:refs(Array=[\n  \t\tHash=\{\n  \t\t\t\t:place(\"Adding index entries to
your text\"),\n  \t\t\t\t:target(\"index-entry-formatting_code\")\n  \t\t}\n
 \t]),\n  \t:sub-index(Hash=\{})\n  }ï½£\n</index-item>\n"
    ]ï½£
  </index>
  ï½£
  rendered-toc: ï½¢
  <toc>
    caption: ï½¢Table of Contentsï½£
    toc-list: ï½¢Array=[
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"SYNOPSIS\"),\n  \t:level(1),\n
 \t:target(\"SYNOPSIS\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"Purpose\"),\n  \t:level(1),\n
 \t:numeration(\"\"),\n  \t:target(\"Purpose\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(List=(\n  \t\t\"The\",\n
 \t\t\"table\",\n  \t\t\"of\",\n  \t\t\"contents\"\n  \t)),\n  \t:level(1),\n
 \t:target(\"The_table_of_contents\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(List=(\n  \t\t\"A\",\n
 \t\t\"short\",\n  \t\t\"index\"\n  \t)),\n  \t:level(1),\n  \t:target(\"A_short_index\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"This is a first heading\"),\n
 \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"This_is_a_first_heading\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"This is a second leve-
l heading\"),\n  \t:level(\"2\"),\n  \t:numeration(\"\"),\n  \t:target(\"This_is_a_second_level_heading\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"This is third level
heading\"),\n  \t:level(\"3\"),\n  \t:numeration(\"\"),\n  \t:target(\"This_is_third_level_heading\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"This is a numbered
heading, level 1\"),\n  \t:level(1),\n  \t:numeration((PStr): \n  \t<numhead>\n
 \t  caption: ï½¢This is a numbered heading, level 1ï½£\n  \t  contents: ï½¢This is a-
 numbered heading, level 1ï½£\n  \t  delta: ï½¢List=()ï½£\n  \t  id: ï½¢ï½£\n  \t  level:
ï½¢1ï½£\n  \t  numeration: ï½¢1.ï½£\n  \t  target: ï½¢This_is_a_numbered_heading,_level_1ï½£\n
 \t  toc: ï½¢Trueï½£\n  \t</numhead>),\n  \t:target(\"This_is_a_numbered_heading,_level_1\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"This is a second leve-
l heading\"),\n  \t:level(\"2\"),\n  \t:numeration((PStr): \n  \t<numhead>\n
 \t  caption: ï½¢This is a second level headingï½£\n  \t  contents: ï½¢This is a seco-
nd level headingï½£\n  \t  delta: ï½¢List=()ï½£\n  \t  id: ï½¢ï½£\n  \t  level: ï½¢2ï½£\n
 \t  numeration: ï½¢1.1.ï½£\n  \t  target: ï½¢This_is_a_second_level_heading_0ï½£\n
 \t  toc: ï½¢Trueï½£\n  \t</numhead>),\n  \t:target(\"This_is_a_second_level_heading_0\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"A third level\"),\n
 \t:level(\"3\"),\n  \t:numeration((PStr): \n  \t<numhead>\n  \t  caption: ï½¢A t-
hird levelï½£\n  \t  contents: ï½¢A third levelï½£\n  \t  delta: ï½¢List=()ï½£\n  \t  id:-
 ï½¢ï½£\n  \t  level: ï½¢3ï½£\n  \t  numeration: ï½¢1.1.1.ï½£\n  \t  target: ï½¢A_third_levelï½£\n
 \t  toc: ï½¢Trueï½£\n  \t</numhead>),\n  \t:target(\"A_third_level\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"Another third level\"),\n
 \t:level(\"3\"),\n  \t:numeration((PStr): \n  \t<numhead>\n  \t  caption: ï½¢Ano-
ther third levelï½£\n  \t  contents: ï½¢Another third levelï½£\n  \t  delta: ï½¢List=()ï½£\n
 \t  id: ï½¢ï½£\n  \t  level: ï½¢3ï½£\n  \t  numeration: ï½¢1.1.2.ï½£\n  \t  target: ï½¢Another_third_levelï½£\n
 \t  toc: ï½¢Trueï½£\n  \t</numhead>),\n  \t:target(\"Another_third_level\")\n  }ï½£\-
n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"Back to second\"),\n
 \t:level(\"2\"),\n  \t:numeration((PStr): \n  \t<numhead>\n  \t  caption: ï½¢Bac-
k to secondï½£\n  \t  contents: ï½¢Back to secondï½£\n  \t  delta: ï½¢List=()ï½£\n  \t
 id: ï½¢ï½£\n  \t  level: ï½¢2ï½£\n  \t  numeration: ï½¢1.2.ï½£\n  \t  target: ï½¢Back_to_secondï½£\n
 \t  toc: ï½¢Trueï½£\n  \t</numhead>),\n  \t:target(\"Back_to_second\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"A third level\"),\n
 \t:level(\"3\"),\n  \t:numeration((PStr): \n  \t<numhead>\n  \t  caption: ï½¢A t-
hird levelï½£\n  \t  contents: ï½¢A third levelï½£\n  \t  delta: ï½¢List=()ï½£\n  \t  id:-
 ï½¢ï½£\n  \t  level: ï½¢3ï½£\n  \t  numeration: ï½¢1.2.1.ï½£\n  \t  target: ï½¢A_third_level_0ï½£\n
 \t  toc: ï½¢Trueï½£\n  \t</numhead>),\n  \t:target(\"A_third_level_0\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"Another third level\"),\n
 \t:level(\"3\"),\n  \t:numeration((PStr): \n  \t<numhead>\n  \t  caption: ï½¢Ano-
ther third levelï½£\n  \t  contents: ï½¢Another third levelï½£\n  \t  delta: ï½¢List=()ï½£\n
 \t  id: ï½¢ï½£\n  \t  level: ï½¢3ï½£\n  \t  numeration: ï½¢1.2.2.ï½£\n  \t  target: ï½¢Another_third_level_0ï½£\n
 \t  toc: ï½¢Trueï½£\n  \t</numhead>),\n  \t:target(\"Another_third_level_0\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"Blocks that are processed
differently\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Blocks_that_are_processed_differently\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(List=(\n  \t\t\"Unrelenting\",\n
 \t\t\"hype\"\n  \t)),\n  \t:level(2),\n  \t:target(\"Unrelenting_hype\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(List=(\n  \t\t\"Fabulous\",\n
 \t\t\"identity\"\n  \t)),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Formula_cannot_be_rendered\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(List=(\n  \t\t\"A\",\n
 \t\t\"customised\",\n  \t\t\"block\"\n  \t)),\n  \t:level(2),\n  \t:numeration(\"\"),\n
 \t:target(\"A_customised_block\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(List=(\n  \t\t\"This\",\n
 \t\t\"is\",\n  \t\t\"an\",\n  \t\t\"extraordinary\",\n  \t\t\"paragraph\"\n
 \t)),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"This_is_an_extraordinary_paragraph\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"Some tables\"),\n
 \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Some_tables\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(List=(\n  \t\t\"A\",\n
 \t\t\"visual\",\n  \t\t\"table\"\n  \t)),\n  \t:level(2),\n  \t:numeration(\"\"),\n
 \t:target(\"A_visual_table\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(List=(\n  \t\t\"A\",\n
 \t\t\"visual\",\n  \t\t\"table\",\n  \t\t\"with\",\n  \t\t\"a\",\n  \t\t\"stupendously\",\n
 \t\t\"long\",\n  \t\t\"caption\"\n  \t)),\n  \t:level(2),\n  \t:numeration(\"\"),\n
 \t:target(\"A_visual_table_with_a_stupendously_long_caption\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(List=(\n  \t\t\"A\",\n
 \t\t\"procedural\",\n  \t\t\"table\"\n  \t)),\n  \t:level(2),\n  \t:numeration(\"\"),\n
 \t:target(\"A_procedural_table\")\n  }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"Adding index entries
to your text\"),\n  \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Adding_index_entries_to_your_text\")\n
 }ï½£\n</toc-item>\n",
    	"\n<toc-item>\n  toc-entry: ï½¢Hash=\{\n  \t:caption(\"Scoping examples\"),\n
 \t:level(1),\n  \t:numeration(\"\"),\n  \t:target(\"Scoping_examples\")\n  }ï½£\-
n</toc-item>\n"
    ]ï½£
  </toc>
  ï½£
  source-data: ï½¢Hash={
  	:index-caption("Index"),
  	:language("en"),
  	:modified(Instant:1718294699.810525733),
  	:name("rakudociem-ipsum.rakudoc"),
  	:path("rakudociem-ipsum.rakudoc"),
  	:rakudoc-config(Hash={
  		:another-option(2),
  		:one-option("first")
  	}),
  	:rakudoc-title("Preface"),
  	:toc-caption("Table of Contents")
  }ï½£
  subtitle: ï½¢A file with as much RakuDoc as we can think ofï½£
  title: ï½¢Proving a rendererï½£
  title-target: ï½¢___topï½£
  warnings: ï½¢
  <warnings>
    warnings: ï½¢Array=[
    	"ï½¢Gï½£ is not defined, but is reserved for future use in block ï½¢rakudocï½£
with heading ï½¢This is third level headingï½£.",
    	"ï½¢Qï½£ is not defined, but is reserved for future use in block ï½¢rakudocï½£
with heading ï½¢This is third level headingï½£.",
    	"ï½¢Wï½£ is not defined, but is reserved for future use in block ï½¢rakudocï½£
with heading ï½¢This is third level headingï½£.",
    	"ï½¢Yï½£ is not defined, but is reserved for future use in block ï½¢rakudocï½£
with heading ï½¢This is third level headingï½£.",
    	"Unknown or as yet undeclared alias ï½¢XXXï½£ in block ï½¢rakudocï½£ with heading
ï½¢This is third level headingï½£ over-riden by ï½¢an undeclaredï½£",
    	"Î”<> markup ignored because it has no version content ï½¢Î”<no versioning
here>ï½£ in block ï½¢rakudocï½£ with heading ï½¢This is third level headingï½£.",
    	"Markup-M failed: template ï½¢PayMeMoreAppï½£ does not exist. Got ï½¢M<should
not recognise this functionality|PayMeMoreApp; user-id>ï½£",
    	"No template exists for custom block ï½¢MyBlockï½£. It has been rendered as
unknown in block ï½¢MyBlockï½£ with heading ï½¢MyBlockï½£."
    ]ï½£
  </warnings>
  ï½£
</final>
