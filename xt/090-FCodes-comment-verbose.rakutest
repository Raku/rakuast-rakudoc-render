use v6.d;
use Test;
use Test::Output;
use RakuDoc::Render;

plan 15;

my $ast;
my $rv;
my RakuDoc::Processor $rdp .= new(:test);
# only test B as H I J K R T U O are the same but different key words
# C V S tested later
$ast = Q:to/QAST/.AST;
    =begin rakudoc
    Some thingB<to be said>inside letters.
    =end rakudoc
    QAST
$rv = $rdp.render( $ast, :pre-finalised );
like $rv.body, /
    'Some thing' .*?
    '<basis>' .*? 'contents:' .*? '｢to be said｣' .*? '</basis>' .*?
    'inside letters.'
    /, 'B-markup works with text with spaces inside text';

$ast = Q:to/QAST/.AST;
    =begin rakudoc
    Some thing to B<say> in between words.
    =end rakudoc
    QAST
$rv = $rdp.render( $ast, :pre-finalised );
like $rv.body, /
    'Some thing to '
    '<basis>' .*? 'contents:' .*? '｢say｣' .+? '</basis>' .*?
    ' in between words.'
    /, 'B-markup works with space';

$ast = Q:to/QAST/.AST;
    =begin rakudoc
    Some thingZ<to be said>inside letters.
    =end rakudoc
    QAST
$rv = $rdp.render( $ast, :pre-finalised );
like $rv.body, /
    'Some thinginside letters.'
    /, 'Z-markup works with text with spaces inside text';

$ast = Q:to/QAST/.AST;
    =begin rakudoc
    Some thing to Z<say> in between words.
    =end rakudoc
    QAST
$rv = $rdp.render( $ast, :pre-finalised );
like $rv.body, /
    'Some thing to  in between words.'
    /, 'Z-markup works with space';

$ast = Q:to/QAST/.AST;
    =begin rakudoc
    Raku makes considerable use of the E<0xAB;0xBB> characters.
    =end rakudoc
    QAST
$rv = $rdp.render( $ast, :pre-finalised );
like $rv.body, /
    'Raku makes' .+
    '<entity>' .*? 'contents: ｢«»｣' .*? '</entity>' .*? 'characters'
    /, 'E-markup ';

# test verbose functionality for markup
$ast = Q:to/QAST/.AST;
    =begin rakudoc
    Some thingB<to be said>inside letters.
    And also I<in italics>.
    =end rakudoc
    QAST
$rdp.verbose('markup-I');
my $out = output-from {
    $rv = $rdp.render( $ast, :pre-finalised );
};
like $out, / '<important>' .*? 'in italics' .+ '</important>'
    /, 'the template result for I is output';
unlike $out, /
    '<basis>' .*? 'contents:' .*? '｢to be said｣' .*? '</basis>' .*?
    /, 'template result for B is not output';
like $rv.body, /
    'Some thing' .*?
    '<basis>' .*? 'contents:' .*? '｢to be said｣' .*? '</basis>' .*?
    'inside letters.' \s*
    'And also' .+? '<important>' .*? 'in italics'
    /, 'B & I works with text with spaces inside text';

# test undefined ASCII
$ast = Q:to/QAST/.AST;
    =begin rakudoc
    Some thing to G<say> in between words.
    =end rakudoc
    QAST
$rv = $rdp.render( $ast, :pre-finalised );
like $rv.body, /
    'Some thing to '
    'G<say>'
    ' in between words.'
    /, 'G code without change';
like $rv.warnings[0], / 'is reserved' /, 'got reserved warning';

# test possible but not defined

$ast = Q:to/QAST/.AST;
    =begin rakudoc
    Some thing to Ɵ<say> in between words.
    =end rakudoc
    QAST
$rv = $rdp.render( $ast, :pre-finalised );
like $rv.body, /
    'Some thing to '
    'Ɵ<say>'
    ' in between words.'
    /, 'Ɵ without change';
like $rv.warnings[0], / 'could be a custom code' /, 'got possible warning';

# test impossible

$ast = Q:to/QAST/.AST;
    =begin rakudoc
    Some thing to ɤ<say> in between words.
    =end rakudoc
    QAST
$rv = $rdp.render( $ast, :pre-finalised );
like $rv.body, /
    'Some thing to '
    'ɤ<say>'
    ' in between words.'
    /, 'ɤ code without change';

## test possible and defined
$rdp.add-template: ( markup-Ɵ => sub ( %prm, $ ) {
    RakuDoc::Processor::express-params( %prm, $, 'theta')
});

$ast = Q:to/QAST/.AST;
    =begin rakudoc
    Some thing to Ɵ<say> in between words.
    =end rakudoc
    QAST
$rv = $rdp.render( $ast, :pre-finalised );
like $rv.body, /
    'Some thing to '
    '<theta>' .*? 'contents:' .*? '｢say｣' .+? '</theta>' .*?
    ' in between words.'
    /, 'Ɵ-markup works with space';
is $rv.warnings.elems, 0, 'no warning';

done-testing;
